// Code generated by lark suite oapi sdk gen
package v3

import (
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
	"github.com/larksuite/oapi-sdk-go/event"
)

type DepartmentCreateEventHandler struct {
	Fn func(*core.Context, *DepartmentCreateEvent) error
}

func (h *DepartmentCreateEventHandler) GetEvent() interface{} {
	return &DepartmentCreateEvent{}
}

func (h *DepartmentCreateEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*DepartmentCreateEvent))
}

func SetDepartmentCreateEventHandler(conf *config.Config, fn func(ctx *core.Context, event *DepartmentCreateEvent) error) {
	event.SetTypeHandler(conf, "department.create_v3", &DepartmentCreateEventHandler{Fn: fn})
}

type DepartmentCreatedEventHandler struct {
	Fn func(*core.Context, *DepartmentCreatedEvent) error
}

func (h *DepartmentCreatedEventHandler) GetEvent() interface{} {
	return &DepartmentCreatedEvent{}
}

func (h *DepartmentCreatedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*DepartmentCreatedEvent))
}

func SetDepartmentCreatedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *DepartmentCreatedEvent) error) {
	event.SetTypeHandler(conf, "department.created_v3", &DepartmentCreatedEventHandler{Fn: fn})
}

type DepartmentDeleteEventHandler struct {
	Fn func(*core.Context, *DepartmentDeleteEvent) error
}

func (h *DepartmentDeleteEventHandler) GetEvent() interface{} {
	return &DepartmentDeleteEvent{}
}

func (h *DepartmentDeleteEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*DepartmentDeleteEvent))
}

func SetDepartmentDeleteEventHandler(conf *config.Config, fn func(ctx *core.Context, event *DepartmentDeleteEvent) error) {
	event.SetTypeHandler(conf, "department.delete_v3", &DepartmentDeleteEventHandler{Fn: fn})
}

type DepartmentDeletedEventHandler struct {
	Fn func(*core.Context, *DepartmentDeletedEvent) error
}

func (h *DepartmentDeletedEventHandler) GetEvent() interface{} {
	return &DepartmentDeletedEvent{}
}

func (h *DepartmentDeletedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*DepartmentDeletedEvent))
}

func SetDepartmentDeletedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *DepartmentDeletedEvent) error) {
	event.SetTypeHandler(conf, "department.deleted_v3", &DepartmentDeletedEventHandler{Fn: fn})
}

type DepartmentUpdateEventHandler struct {
	Fn func(*core.Context, *DepartmentUpdateEvent) error
}

func (h *DepartmentUpdateEventHandler) GetEvent() interface{} {
	return &DepartmentUpdateEvent{}
}

func (h *DepartmentUpdateEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*DepartmentUpdateEvent))
}

func SetDepartmentUpdateEventHandler(conf *config.Config, fn func(ctx *core.Context, event *DepartmentUpdateEvent) error) {
	event.SetTypeHandler(conf, "department.update_v3", &DepartmentUpdateEventHandler{Fn: fn})
}

type DepartmentUpdatedEventHandler struct {
	Fn func(*core.Context, *DepartmentUpdatedEvent) error
}

func (h *DepartmentUpdatedEventHandler) GetEvent() interface{} {
	return &DepartmentUpdatedEvent{}
}

func (h *DepartmentUpdatedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*DepartmentUpdatedEvent))
}

func SetDepartmentUpdatedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *DepartmentUpdatedEvent) error) {
	event.SetTypeHandler(conf, "department.updated_v3", &DepartmentUpdatedEventHandler{Fn: fn})
}

type ScopeUpdatedEventHandler struct {
	Fn func(*core.Context, *ScopeUpdatedEvent) error
}

func (h *ScopeUpdatedEventHandler) GetEvent() interface{} {
	return &ScopeUpdatedEvent{}
}

func (h *ScopeUpdatedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*ScopeUpdatedEvent))
}

func SetScopeUpdatedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *ScopeUpdatedEvent) error) {
	event.SetTypeHandler(conf, "scope.updated_v3", &ScopeUpdatedEventHandler{Fn: fn})
}

type UserCreateEventHandler struct {
	Fn func(*core.Context, *UserCreateEvent) error
}

func (h *UserCreateEventHandler) GetEvent() interface{} {
	return &UserCreateEvent{}
}

func (h *UserCreateEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserCreateEvent))
}

func SetUserCreateEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserCreateEvent) error) {
	event.SetTypeHandler(conf, "user.create_v3", &UserCreateEventHandler{Fn: fn})
}

type UserCreatedEventHandler struct {
	Fn func(*core.Context, *UserCreatedEvent) error
}

func (h *UserCreatedEventHandler) GetEvent() interface{} {
	return &UserCreatedEvent{}
}

func (h *UserCreatedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserCreatedEvent))
}

func SetUserCreatedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserCreatedEvent) error) {
	event.SetTypeHandler(conf, "user.created_v3", &UserCreatedEventHandler{Fn: fn})
}

type UserDeleteEventHandler struct {
	Fn func(*core.Context, *UserDeleteEvent) error
}

func (h *UserDeleteEventHandler) GetEvent() interface{} {
	return &UserDeleteEvent{}
}

func (h *UserDeleteEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserDeleteEvent))
}

func SetUserDeleteEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserDeleteEvent) error) {
	event.SetTypeHandler(conf, "user.delete_v3", &UserDeleteEventHandler{Fn: fn})
}

type UserDeletedEventHandler struct {
	Fn func(*core.Context, *UserDeletedEvent) error
}

func (h *UserDeletedEventHandler) GetEvent() interface{} {
	return &UserDeletedEvent{}
}

func (h *UserDeletedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserDeletedEvent))
}

func SetUserDeletedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserDeletedEvent) error) {
	event.SetTypeHandler(conf, "user.deleted_v3", &UserDeletedEventHandler{Fn: fn})
}

type UserUpdateEventHandler struct {
	Fn func(*core.Context, *UserUpdateEvent) error
}

func (h *UserUpdateEventHandler) GetEvent() interface{} {
	return &UserUpdateEvent{}
}

func (h *UserUpdateEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserUpdateEvent))
}

func SetUserUpdateEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserUpdateEvent) error) {
	event.SetTypeHandler(conf, "user.update_v3", &UserUpdateEventHandler{Fn: fn})
}

type UserUpdatedEventHandler struct {
	Fn func(*core.Context, *UserUpdatedEvent) error
}

func (h *UserUpdatedEventHandler) GetEvent() interface{} {
	return &UserUpdatedEvent{}
}

func (h *UserUpdatedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserUpdatedEvent))
}

func SetUserUpdatedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserUpdatedEvent) error) {
	event.SetTypeHandler(conf, "user.updated_v3", &UserUpdatedEventHandler{Fn: fn})
}

type UserGroupCreateEventHandler struct {
	Fn func(*core.Context, *UserGroupCreateEvent) error
}

func (h *UserGroupCreateEventHandler) GetEvent() interface{} {
	return &UserGroupCreateEvent{}
}

func (h *UserGroupCreateEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserGroupCreateEvent))
}

func SetUserGroupCreateEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserGroupCreateEvent) error) {
	event.SetTypeHandler(conf, "user_group.create_v3", &UserGroupCreateEventHandler{Fn: fn})
}

type UserGroupCreatedEventHandler struct {
	Fn func(*core.Context, *UserGroupCreatedEvent) error
}

func (h *UserGroupCreatedEventHandler) GetEvent() interface{} {
	return &UserGroupCreatedEvent{}
}

func (h *UserGroupCreatedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserGroupCreatedEvent))
}

func SetUserGroupCreatedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserGroupCreatedEvent) error) {
	event.SetTypeHandler(conf, "user_group.created_v3", &UserGroupCreatedEventHandler{Fn: fn})
}

type UserGroupDeleteEventHandler struct {
	Fn func(*core.Context, *UserGroupDeleteEvent) error
}

func (h *UserGroupDeleteEventHandler) GetEvent() interface{} {
	return &UserGroupDeleteEvent{}
}

func (h *UserGroupDeleteEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserGroupDeleteEvent))
}

func SetUserGroupDeleteEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserGroupDeleteEvent) error) {
	event.SetTypeHandler(conf, "user_group.delete_v3", &UserGroupDeleteEventHandler{Fn: fn})
}

type UserGroupDeletedEventHandler struct {
	Fn func(*core.Context, *UserGroupDeletedEvent) error
}

func (h *UserGroupDeletedEventHandler) GetEvent() interface{} {
	return &UserGroupDeletedEvent{}
}

func (h *UserGroupDeletedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserGroupDeletedEvent))
}

func SetUserGroupDeletedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserGroupDeletedEvent) error) {
	event.SetTypeHandler(conf, "user_group.deleted_v3", &UserGroupDeletedEventHandler{Fn: fn})
}

type UserGroupUpdateEventHandler struct {
	Fn func(*core.Context, *UserGroupUpdateEvent) error
}

func (h *UserGroupUpdateEventHandler) GetEvent() interface{} {
	return &UserGroupUpdateEvent{}
}

func (h *UserGroupUpdateEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserGroupUpdateEvent))
}

func SetUserGroupUpdateEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserGroupUpdateEvent) error) {
	event.SetTypeHandler(conf, "user_group.update_v3", &UserGroupUpdateEventHandler{Fn: fn})
}

type UserGroupUpdatedEventHandler struct {
	Fn func(*core.Context, *UserGroupUpdatedEvent) error
}

func (h *UserGroupUpdatedEventHandler) GetEvent() interface{} {
	return &UserGroupUpdatedEvent{}
}

func (h *UserGroupUpdatedEventHandler) Handle(ctx *core.Context, event interface{}) error {
	return h.Fn(ctx, event.(*UserGroupUpdatedEvent))
}

func SetUserGroupUpdatedEventHandler(conf *config.Config, fn func(ctx *core.Context, event *UserGroupUpdatedEvent) error) {
	event.SetTypeHandler(conf, "user_group.updated_v3", &UserGroupUpdatedEventHandler{Fn: fn})
}
