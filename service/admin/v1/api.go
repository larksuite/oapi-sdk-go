// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
	"path"
)

const serviceBasePath = "admin/v1"

type Service struct {
	conf           *config.Config
	basePath       string
	AdminDeptStats *AdminDeptStatService
	AdminUserStats *AdminUserStatService
	AuditInfos     *AuditInfoService
}

func NewService(conf *config.Config) *Service {
	s := &Service{
		conf:     conf,
		basePath: serviceBasePath,
	}
	s.AdminDeptStats = newAdminDeptStatService(s)
	s.AdminUserStats = newAdminUserStatService(s)
	s.AuditInfos = newAuditInfoService(s)
	return s
}

type AdminDeptStatService struct {
	service *Service
}

func newAdminDeptStatService(service *Service) *AdminDeptStatService {
	return &AdminDeptStatService{
		service: service,
	}
}

type AdminUserStatService struct {
	service *Service
}

func newAdminUserStatService(service *Service) *AdminUserStatService {
	return &AdminUserStatService{
		service: service,
	}
}

type AuditInfoService struct {
	service *Service
}

func newAuditInfoService(service *Service) *AuditInfoService {
	return &AuditInfoService{
		service: service,
	}
}

type AdminDeptStatListReqCall struct {
	ctx            *core.Context
	adminDeptStats *AdminDeptStatService

	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *AdminDeptStatListReqCall) SetDepartmentIdType(departmentIdType string) {
	rc.queryParams["department_id_type"] = departmentIdType
}
func (rc *AdminDeptStatListReqCall) SetStartDate(startDate string) {
	rc.queryParams["start_date"] = startDate
}
func (rc *AdminDeptStatListReqCall) SetEndDate(endDate string) {
	rc.queryParams["end_date"] = endDate
}
func (rc *AdminDeptStatListReqCall) SetDepartmentId(departmentId string) {
	rc.queryParams["department_id"] = departmentId
}
func (rc *AdminDeptStatListReqCall) SetContainsChildDept(containsChildDept bool) {
	rc.queryParams["contains_child_dept"] = containsChildDept
}
func (rc *AdminDeptStatListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *AdminDeptStatListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *AdminDeptStatListReqCall) Do() (*AdminDeptStatListResult, error) {
	httpPath := path.Join(rc.adminDeptStats.service.basePath, "admin_dept_stats")
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &AdminDeptStatListResult{}
	req := request.NewRequest(httpPath, "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.adminDeptStats.service.conf, req)
	return result, err
}

func (adminDeptStats *AdminDeptStatService) List(ctx *core.Context, optFns ...request.OptFn) *AdminDeptStatListReqCall {
	return &AdminDeptStatListReqCall{
		ctx:            ctx,
		adminDeptStats: adminDeptStats,
		queryParams:    map[string]interface{}{},
		optFns:         optFns,
	}
}

type AdminUserStatListReqCall struct {
	ctx            *core.Context
	adminUserStats *AdminUserStatService

	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *AdminUserStatListReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *AdminUserStatListReqCall) SetDepartmentIdType(departmentIdType string) {
	rc.queryParams["department_id_type"] = departmentIdType
}
func (rc *AdminUserStatListReqCall) SetStartDate(startDate string) {
	rc.queryParams["start_date"] = startDate
}
func (rc *AdminUserStatListReqCall) SetEndDate(endDate string) {
	rc.queryParams["end_date"] = endDate
}
func (rc *AdminUserStatListReqCall) SetDepartmentId(departmentId string) {
	rc.queryParams["department_id"] = departmentId
}
func (rc *AdminUserStatListReqCall) SetUserId(userId string) {
	rc.queryParams["user_id"] = userId
}
func (rc *AdminUserStatListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *AdminUserStatListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *AdminUserStatListReqCall) Do() (*AdminUserStatListResult, error) {
	httpPath := path.Join(rc.adminUserStats.service.basePath, "admin_user_stats")
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &AdminUserStatListResult{}
	req := request.NewRequest(httpPath, "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.adminUserStats.service.conf, req)
	return result, err
}

func (adminUserStats *AdminUserStatService) List(ctx *core.Context, optFns ...request.OptFn) *AdminUserStatListReqCall {
	return &AdminUserStatListReqCall{
		ctx:            ctx,
		adminUserStats: adminUserStats,
		queryParams:    map[string]interface{}{},
		optFns:         optFns,
	}
}

type AuditInfoListReqCall struct {
	ctx        *core.Context
	auditInfos *AuditInfoService

	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *AuditInfoListReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *AuditInfoListReqCall) SetLatest(latest int) {
	rc.queryParams["latest"] = latest
}
func (rc *AuditInfoListReqCall) SetOldest(oldest int) {
	rc.queryParams["oldest"] = oldest
}
func (rc *AuditInfoListReqCall) SetEventName(eventName string) {
	rc.queryParams["event_name"] = eventName
}
func (rc *AuditInfoListReqCall) SetOperatorType(operatorType string) {
	rc.queryParams["operator_type"] = operatorType
}
func (rc *AuditInfoListReqCall) SetOperatorValue(operatorValue string) {
	rc.queryParams["operator_value"] = operatorValue
}
func (rc *AuditInfoListReqCall) SetEventModule(eventModule int) {
	rc.queryParams["event_module"] = eventModule
}
func (rc *AuditInfoListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *AuditInfoListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *AuditInfoListReqCall) Do() (*AuditInfoListResult, error) {
	httpPath := path.Join(rc.auditInfos.service.basePath, "audit_infos")
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &AuditInfoListResult{}
	req := request.NewRequest(httpPath, "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.auditInfos.service.conf, req)
	return result, err
}

func (auditInfos *AuditInfoService) List(ctx *core.Context, optFns ...request.OptFn) *AuditInfoListReqCall {
	return &AuditInfoListReqCall{
		ctx:         ctx,
		auditInfos:  auditInfos,
		queryParams: map[string]interface{}{},
		optFns:      optFns,
	}
}
