// Code generated by lark suite oapi sdk gen
package v4

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/api/core/response"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
	"path"
)

const serviceBasePath = "calendar/v4"

type Service struct {
	conf                   *config.Config
	basePath               string
	Calendars              *CalendarService
	CalendarAcls           *CalendarAclService
	CalendarEvents         *CalendarEventService
	CalendarEventAttendees *CalendarEventAttendeeService
	Freebusys              *FreebusyService
}

func NewService(conf *config.Config) *Service {
	s := &Service{
		conf:     conf,
		basePath: serviceBasePath,
	}
	s.Calendars = newCalendarService(s)
	s.CalendarAcls = newCalendarAclService(s)
	s.CalendarEvents = newCalendarEventService(s)
	s.CalendarEventAttendees = newCalendarEventAttendeeService(s)
	s.Freebusys = newFreebusyService(s)
	return s
}

type CalendarService struct {
	service *Service
}

func newCalendarService(service *Service) *CalendarService {
	return &CalendarService{
		service: service,
	}
}

type CalendarAclService struct {
	service *Service
}

func newCalendarAclService(service *Service) *CalendarAclService {
	return &CalendarAclService{
		service: service,
	}
}

type CalendarEventService struct {
	service *Service
}

func newCalendarEventService(service *Service) *CalendarEventService {
	return &CalendarEventService{
		service: service,
	}
}

type CalendarEventAttendeeService struct {
	service *Service
}

func newCalendarEventAttendeeService(service *Service) *CalendarEventAttendeeService {
	return &CalendarEventAttendeeService{
		service: service,
	}
}

type FreebusyService struct {
	service *Service
}

func newFreebusyService(service *Service) *FreebusyService {
	return &FreebusyService{
		service: service,
	}
}

type CalendarAclCreateReqCall struct {
	ctx          *core.Context
	calendarAcls *CalendarAclService
	body         *CalendarAcl
	pathParams   map[string]interface{}

	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *CalendarAclCreateReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarAclCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *CalendarAclCreateReqCall) Do() (*CalendarAcl, error) {
	httpPath := path.Join(rc.calendarAcls.service.basePath, "calendars/:calendar_id/acls")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &CalendarAcl{}
	req := request.NewRequest(httpPath, "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarAcls.service.conf, req)
	return result, err
}

func (calendarAcls *CalendarAclService) Create(ctx *core.Context, body *CalendarAcl, optFns ...request.OptFn) *CalendarAclCreateReqCall {
	return &CalendarAclCreateReqCall{
		ctx:          ctx,
		calendarAcls: calendarAcls,
		body:         body,
		pathParams:   map[string]interface{}{},
		queryParams:  map[string]interface{}{},
		optFns:       optFns,
	}
}

type CalendarAclDeleteReqCall struct {
	ctx          *core.Context
	calendarAcls *CalendarAclService
	pathParams   map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarAclDeleteReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarAclDeleteReqCall) SetAclId(aclId string) {
	rc.pathParams["acl_id"] = aclId
}
func (rc *CalendarAclDeleteReqCall) Do() (*response.NoData, error) {
	httpPath := path.Join(rc.calendarAcls.service.basePath, "calendars/:calendar_id/acls/:acl_id")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest(httpPath, "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarAcls.service.conf, req)
	return result, err
}

func (calendarAcls *CalendarAclService) Delete(ctx *core.Context, optFns ...request.OptFn) *CalendarAclDeleteReqCall {
	return &CalendarAclDeleteReqCall{
		ctx:          ctx,
		calendarAcls: calendarAcls,
		pathParams:   map[string]interface{}{},
		optFns:       optFns,
	}
}

type CalendarAclListReqCall struct {
	ctx          *core.Context
	calendarAcls *CalendarAclService
	pathParams   map[string]interface{}

	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *CalendarAclListReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarAclListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *CalendarAclListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *CalendarAclListReqCall) Do() (*CalendarAclListResult, error) {
	httpPath := path.Join(rc.calendarAcls.service.basePath, "calendars/:calendar_id/acls")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &CalendarAclListResult{}
	req := request.NewRequest(httpPath, "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarAcls.service.conf, req)
	return result, err
}

func (calendarAcls *CalendarAclService) List(ctx *core.Context, optFns ...request.OptFn) *CalendarAclListReqCall {
	return &CalendarAclListReqCall{
		ctx:          ctx,
		calendarAcls: calendarAcls,
		pathParams:   map[string]interface{}{},
		queryParams:  map[string]interface{}{},
		optFns:       optFns,
	}
}

type CalendarCreateReqCall struct {
	ctx       *core.Context
	calendars *CalendarService
	body      *Calendar

	optFns []request.OptFn
}

func (rc *CalendarCreateReqCall) Do() (*CalendarCreateResult, error) {
	httpPath := path.Join(rc.calendars.service.basePath, "calendars")
	var result = &CalendarCreateResult{}
	req := request.NewRequest(httpPath, "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendars.service.conf, req)
	return result, err
}

func (calendars *CalendarService) Create(ctx *core.Context, body *Calendar, optFns ...request.OptFn) *CalendarCreateReqCall {
	return &CalendarCreateReqCall{
		ctx:       ctx,
		calendars: calendars,
		body:      body,
		optFns:    optFns,
	}
}

type CalendarDeleteReqCall struct {
	ctx        *core.Context
	calendars  *CalendarService
	pathParams map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarDeleteReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarDeleteReqCall) Do() (*response.NoData, error) {
	httpPath := path.Join(rc.calendars.service.basePath, "calendars/:calendar_id")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest(httpPath, "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendars.service.conf, req)
	return result, err
}

func (calendars *CalendarService) Delete(ctx *core.Context, optFns ...request.OptFn) *CalendarDeleteReqCall {
	return &CalendarDeleteReqCall{
		ctx:        ctx,
		calendars:  calendars,
		pathParams: map[string]interface{}{},
		optFns:     optFns,
	}
}

type CalendarEventAttendeeBatchDeleteReqCall struct {
	ctx                    *core.Context
	calendarEventAttendees *CalendarEventAttendeeService
	body                   *CalendarEventAttendeeBatchDeleteReqBody
	pathParams             map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarEventAttendeeBatchDeleteReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarEventAttendeeBatchDeleteReqCall) SetEventId(eventId string) {
	rc.pathParams["event_id"] = eventId
}
func (rc *CalendarEventAttendeeBatchDeleteReqCall) Do() (*response.NoData, error) {
	httpPath := path.Join(rc.calendarEventAttendees.service.basePath, "calendars/:calendar_id/events/:event_id/attendees/batch_delete")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest(httpPath, "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarEventAttendees.service.conf, req)
	return result, err
}

func (calendarEventAttendees *CalendarEventAttendeeService) BatchDelete(ctx *core.Context, body *CalendarEventAttendeeBatchDeleteReqBody, optFns ...request.OptFn) *CalendarEventAttendeeBatchDeleteReqCall {
	return &CalendarEventAttendeeBatchDeleteReqCall{
		ctx:                    ctx,
		calendarEventAttendees: calendarEventAttendees,
		body:                   body,
		pathParams:             map[string]interface{}{},
		optFns:                 optFns,
	}
}

type CalendarEventAttendeeCreateReqCall struct {
	ctx                    *core.Context
	calendarEventAttendees *CalendarEventAttendeeService
	body                   *CalendarEventAttendeeCreateReqBody
	pathParams             map[string]interface{}

	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *CalendarEventAttendeeCreateReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarEventAttendeeCreateReqCall) SetEventId(eventId string) {
	rc.pathParams["event_id"] = eventId
}
func (rc *CalendarEventAttendeeCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *CalendarEventAttendeeCreateReqCall) Do() (*CalendarEventAttendeeCreateResult, error) {
	httpPath := path.Join(rc.calendarEventAttendees.service.basePath, "calendars/:calendar_id/events/:event_id/attendees")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &CalendarEventAttendeeCreateResult{}
	req := request.NewRequest(httpPath, "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarEventAttendees.service.conf, req)
	return result, err
}

func (calendarEventAttendees *CalendarEventAttendeeService) Create(ctx *core.Context, body *CalendarEventAttendeeCreateReqBody, optFns ...request.OptFn) *CalendarEventAttendeeCreateReqCall {
	return &CalendarEventAttendeeCreateReqCall{
		ctx:                    ctx,
		calendarEventAttendees: calendarEventAttendees,
		body:                   body,
		pathParams:             map[string]interface{}{},
		queryParams:            map[string]interface{}{},
		optFns:                 optFns,
	}
}

type CalendarEventAttendeeListReqCall struct {
	ctx                    *core.Context
	calendarEventAttendees *CalendarEventAttendeeService
	pathParams             map[string]interface{}

	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *CalendarEventAttendeeListReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarEventAttendeeListReqCall) SetEventId(eventId string) {
	rc.pathParams["event_id"] = eventId
}
func (rc *CalendarEventAttendeeListReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *CalendarEventAttendeeListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *CalendarEventAttendeeListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *CalendarEventAttendeeListReqCall) Do() (*CalendarEventAttendeeListResult, error) {
	httpPath := path.Join(rc.calendarEventAttendees.service.basePath, "calendars/:calendar_id/events/:event_id/attendees")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &CalendarEventAttendeeListResult{}
	req := request.NewRequest(httpPath, "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarEventAttendees.service.conf, req)
	return result, err
}

func (calendarEventAttendees *CalendarEventAttendeeService) List(ctx *core.Context, optFns ...request.OptFn) *CalendarEventAttendeeListReqCall {
	return &CalendarEventAttendeeListReqCall{
		ctx:                    ctx,
		calendarEventAttendees: calendarEventAttendees,
		pathParams:             map[string]interface{}{},
		queryParams:            map[string]interface{}{},
		optFns:                 optFns,
	}
}

type CalendarEventCreateReqCall struct {
	ctx            *core.Context
	calendarEvents *CalendarEventService
	body           *CalendarEvent
	pathParams     map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarEventCreateReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarEventCreateReqCall) Do() (*CalendarEventCreateResult, error) {
	httpPath := path.Join(rc.calendarEvents.service.basePath, "calendars/:calendar_id/events")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &CalendarEventCreateResult{}
	req := request.NewRequest(httpPath, "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarEvents.service.conf, req)
	return result, err
}

func (calendarEvents *CalendarEventService) Create(ctx *core.Context, body *CalendarEvent, optFns ...request.OptFn) *CalendarEventCreateReqCall {
	return &CalendarEventCreateReqCall{
		ctx:            ctx,
		calendarEvents: calendarEvents,
		body:           body,
		pathParams:     map[string]interface{}{},
		optFns:         optFns,
	}
}

type CalendarEventDeleteReqCall struct {
	ctx            *core.Context
	calendarEvents *CalendarEventService
	pathParams     map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarEventDeleteReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarEventDeleteReqCall) SetEventId(eventId string) {
	rc.pathParams["event_id"] = eventId
}
func (rc *CalendarEventDeleteReqCall) Do() (*response.NoData, error) {
	httpPath := path.Join(rc.calendarEvents.service.basePath, "calendars/:calendar_id/events/:event_id")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest(httpPath, "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarEvents.service.conf, req)
	return result, err
}

func (calendarEvents *CalendarEventService) Delete(ctx *core.Context, optFns ...request.OptFn) *CalendarEventDeleteReqCall {
	return &CalendarEventDeleteReqCall{
		ctx:            ctx,
		calendarEvents: calendarEvents,
		pathParams:     map[string]interface{}{},
		optFns:         optFns,
	}
}

type CalendarEventGetReqCall struct {
	ctx            *core.Context
	calendarEvents *CalendarEventService
	pathParams     map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarEventGetReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarEventGetReqCall) SetEventId(eventId string) {
	rc.pathParams["event_id"] = eventId
}
func (rc *CalendarEventGetReqCall) Do() (*CalendarEventGetResult, error) {
	httpPath := path.Join(rc.calendarEvents.service.basePath, "calendars/:calendar_id/events/:event_id")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &CalendarEventGetResult{}
	req := request.NewRequest(httpPath, "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarEvents.service.conf, req)
	return result, err
}

func (calendarEvents *CalendarEventService) Get(ctx *core.Context, optFns ...request.OptFn) *CalendarEventGetReqCall {
	return &CalendarEventGetReqCall{
		ctx:            ctx,
		calendarEvents: calendarEvents,
		pathParams:     map[string]interface{}{},
		optFns:         optFns,
	}
}

type CalendarEventListReqCall struct {
	ctx            *core.Context
	calendarEvents *CalendarEventService
	body           *CalendarEventListReqBody
	pathParams     map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarEventListReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarEventListReqCall) Do() (*CalendarEventListResult, error) {
	httpPath := path.Join(rc.calendarEvents.service.basePath, "calendars/:calendar_id/events")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &CalendarEventListResult{}
	req := request.NewRequest(httpPath, "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarEvents.service.conf, req)
	return result, err
}

func (calendarEvents *CalendarEventService) List(ctx *core.Context, body *CalendarEventListReqBody, optFns ...request.OptFn) *CalendarEventListReqCall {
	return &CalendarEventListReqCall{
		ctx:            ctx,
		calendarEvents: calendarEvents,
		body:           body,
		pathParams:     map[string]interface{}{},
		optFns:         optFns,
	}
}

type CalendarEventPatchReqCall struct {
	ctx            *core.Context
	calendarEvents *CalendarEventService
	body           *CalendarEvent
	pathParams     map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarEventPatchReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarEventPatchReqCall) SetEventId(eventId string) {
	rc.pathParams["event_id"] = eventId
}
func (rc *CalendarEventPatchReqCall) Do() (*CalendarEventPatchResult, error) {
	httpPath := path.Join(rc.calendarEvents.service.basePath, "calendars/:calendar_id/events/:event_id")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &CalendarEventPatchResult{}
	req := request.NewRequest(httpPath, "PATCH",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendarEvents.service.conf, req)
	return result, err
}

func (calendarEvents *CalendarEventService) Patch(ctx *core.Context, body *CalendarEvent, optFns ...request.OptFn) *CalendarEventPatchReqCall {
	return &CalendarEventPatchReqCall{
		ctx:            ctx,
		calendarEvents: calendarEvents,
		body:           body,
		pathParams:     map[string]interface{}{},
		optFns:         optFns,
	}
}

type CalendarGetReqCall struct {
	ctx        *core.Context
	calendars  *CalendarService
	pathParams map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarGetReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarGetReqCall) Do() (*Calendar, error) {
	httpPath := path.Join(rc.calendars.service.basePath, "calendars/:calendar_id")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &Calendar{}
	req := request.NewRequest(httpPath, "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendars.service.conf, req)
	return result, err
}

func (calendars *CalendarService) Get(ctx *core.Context, optFns ...request.OptFn) *CalendarGetReqCall {
	return &CalendarGetReqCall{
		ctx:        ctx,
		calendars:  calendars,
		pathParams: map[string]interface{}{},
		optFns:     optFns,
	}
}

type CalendarListReqCall struct {
	ctx       *core.Context
	calendars *CalendarService
	body      *CalendarListReqBody

	optFns []request.OptFn
}

func (rc *CalendarListReqCall) Do() (*CalendarListResult, error) {
	httpPath := path.Join(rc.calendars.service.basePath, "calendars")
	var result = &CalendarListResult{}
	req := request.NewRequest(httpPath, "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendars.service.conf, req)
	return result, err
}

func (calendars *CalendarService) List(ctx *core.Context, body *CalendarListReqBody, optFns ...request.OptFn) *CalendarListReqCall {
	return &CalendarListReqCall{
		ctx:       ctx,
		calendars: calendars,
		body:      body,
		optFns:    optFns,
	}
}

type CalendarPatchReqCall struct {
	ctx        *core.Context
	calendars  *CalendarService
	body       *Calendar
	pathParams map[string]interface{}

	optFns []request.OptFn
}

func (rc *CalendarPatchReqCall) SetCalendarId(calendarId string) {
	rc.pathParams["calendar_id"] = calendarId
}
func (rc *CalendarPatchReqCall) Do() (*CalendarPatchResult, error) {
	httpPath := path.Join(rc.calendars.service.basePath, "calendars/:calendar_id")
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &CalendarPatchResult{}
	req := request.NewRequest(httpPath, "PATCH",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendars.service.conf, req)
	return result, err
}

func (calendars *CalendarService) Patch(ctx *core.Context, body *Calendar, optFns ...request.OptFn) *CalendarPatchReqCall {
	return &CalendarPatchReqCall{
		ctx:        ctx,
		calendars:  calendars,
		body:       body,
		pathParams: map[string]interface{}{},
		optFns:     optFns,
	}
}

type CalendarSearchReqCall struct {
	ctx       *core.Context
	calendars *CalendarService
	body      *CalendarSearchReqBody

	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *CalendarSearchReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *CalendarSearchReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *CalendarSearchReqCall) Do() (*CalendarSearchResult, error) {
	httpPath := path.Join(rc.calendars.service.basePath, "calendars/search")
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &CalendarSearchResult{}
	req := request.NewRequest(httpPath, "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.calendars.service.conf, req)
	return result, err
}

func (calendars *CalendarService) Search(ctx *core.Context, body *CalendarSearchReqBody, optFns ...request.OptFn) *CalendarSearchReqCall {
	return &CalendarSearchReqCall{
		ctx:         ctx,
		calendars:   calendars,
		body:        body,
		queryParams: map[string]interface{}{},
		optFns:      optFns,
	}
}

type FreebusyListReqCall struct {
	ctx       *core.Context
	freebusys *FreebusyService
	body      *FreebusyListReqBody

	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *FreebusyListReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *FreebusyListReqCall) Do() (*FreebusyListResult, error) {
	httpPath := path.Join(rc.freebusys.service.basePath, "freebusy/list")
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &FreebusyListResult{}
	req := request.NewRequest(httpPath, "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.freebusys.service.conf, req)
	return result, err
}

func (freebusys *FreebusyService) List(ctx *core.Context, body *FreebusyListReqBody, optFns ...request.OptFn) *FreebusyListReqCall {
	return &FreebusyListReqCall{
		ctx:         ctx,
		freebusys:   freebusys,
		body:        body,
		queryParams: map[string]interface{}{},
		optFns:      optFns,
	}
}
