// Code generated by lark suite oapi sdk gen
package v1
import (
    "github.com/larksuite/oapi-sdk-go/api/core/tools"
	"github.com/larksuite/oapi-sdk-go/event/core/model"
)
type Collaborator struct {
    Id  string `json:"id,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Collaborator) MarshalJSON() ([]byte, error) {
	type cp Collaborator
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Comment struct {
    Content  string `json:"content,omitempty"`
    ParentId  int64 `json:"parent_id,omitempty,string"`
    Id  int64 `json:"id,omitempty,string"`
    ForceSendFields []string `json:"-"`
}

func (s *Comment) MarshalJSON() ([]byte, error) {
	type cp Comment
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Due struct {
    Time  int64 `json:"time,omitempty,string"`
    Timezone  string `json:"timezone,omitempty"`
    IsAllDay  bool `json:"is_all_day,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Due) MarshalJSON() ([]byte, error) {
	type cp Due
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Follower struct {
    Id  string `json:"id,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Follower) MarshalJSON() ([]byte, error) {
	type cp Follower
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Href struct {
    Url  string `json:"url,omitempty"`
    Title  string `json:"title,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Href) MarshalJSON() ([]byte, error) {
	type cp Href
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Origin struct {
    PlatformI18nName  string `json:"platform_i18n_name,omitempty"`
    Href  *Href `json:"href,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Origin) MarshalJSON() ([]byte, error) {
	type cp Origin
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Reminder struct {
    Id  int64 `json:"id,omitempty,string"`
    RelativeFireMinute  int `json:"relative_fire_minute,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Reminder) MarshalJSON() ([]byte, error) {
	type cp Reminder
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type Task struct {
    Id  string `json:"id,omitempty"`
    Summary  string `json:"summary,omitempty"`
    Description  string `json:"description,omitempty"`
    CompleteTime  int64 `json:"complete_time,omitempty,string"`
    CreatorId  string `json:"creator_id,omitempty"`
    Extra  string `json:"extra,omitempty"`
    CreateTime  int64 `json:"create_time,omitempty,string"`
    UpdateTime  int64 `json:"update_time,omitempty,string"`
    Due  *Due `json:"due,omitempty"`
    Origin  *Origin `json:"origin,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *Task) MarshalJSON() ([]byte, error) {
	type cp Task
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}


type TaskCollaborator struct {
}



type TaskComment struct {
}



type TaskFollower struct {
}



type TaskReminder struct {
}







type TaskCollaboratorCreateResult struct {
    Collaborator  *Collaborator `json:"collaborator,omitempty"`
}


type TaskCreateResult struct {
    Task  *Task `json:"task,omitempty"`
}


type TaskCommentCreateResult struct {
    Comment  *Comment `json:"comment,omitempty"`
}


type TaskReminderCreateResult struct {
    Reminder  *Reminder `json:"reminder,omitempty"`
}


type TaskFollowerCreateResult struct {
    Follower  *Follower `json:"follower,omitempty"`
}












type TaskCommentGetResult struct {
    Comment  *Comment `json:"comment,omitempty"`
}


type TaskGetResult struct {
    Task  *Task `json:"task,omitempty"`
}


type TaskCollaboratorListResult struct {
    Items  []*Collaborator `json:"items,omitempty"`
    PageToken  string `json:"page_token,omitempty"`
    HasMore  bool `json:"has_more,omitempty"`
}


type TaskFollowerListResult struct {
    Items  []*Follower `json:"items,omitempty"`
    PageToken  string `json:"page_token,omitempty"`
    HasMore  bool `json:"has_more,omitempty"`
}


type TaskReminderListResult struct {
    Items  []*Reminder `json:"items,omitempty"`
    PageToken  string `json:"page_token,omitempty"`
    HasMore  bool `json:"has_more,omitempty"`
}

type TaskPatchReqBody struct {
    Task  *Task `json:"task,omitempty"`
    UpdateFields  []string `json:"update_fields,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *TaskPatchReqBody) MarshalJSON() ([]byte, error) {
	type cp TaskPatchReqBody
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type TaskPatchResult struct {
    Task  *Task `json:"task,omitempty"`
}



type TaskCommentUpdateReqBody struct {
    Content  string `json:"content,omitempty"`
    ForceSendFields []string `json:"-"`
}

func (s *TaskCommentUpdateReqBody) MarshalJSON() ([]byte, error) {
	type cp TaskCommentUpdateReqBody
	raw := cp(*s)
	return tools.MarshalJSON(raw, s.ForceSendFields)
}

type TaskCommentUpdateResult struct {
    Comment  *Comment `json:"comment,omitempty"`
}

type TaskCommentUpdatedEventData struct {
    TaskId  string `json:"task_id,omitempty"`
    CommentId  string `json:"comment_id,omitempty"`
    ParentId  string `json:"parent_id,omitempty"`
    ObjType  int `json:"obj_type,omitempty"`
}

type TaskCommentUpdatedEvent struct {
    *model.BaseEventV2
    Event *TaskCommentUpdatedEventData `json:"event"`
}

type TaskUpdatedEventData struct {
    TaskId  string `json:"task_id,omitempty"`
    ObjType  int `json:"obj_type,omitempty"`
}

type TaskUpdatedEvent struct {
    *model.BaseEventV2
    Event *TaskUpdatedEventData `json:"event"`
}


