// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/api/core/response"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
)

type Service struct {
    conf           *config.Config
	Tasks   *TaskService
	TaskCollaborators   *TaskCollaboratorService
	TaskFollowers   *TaskFollowerService
	TaskReminders   *TaskReminderService
	
}

func NewService(conf *config.Config) *Service {
    s := &Service{
        conf:     conf,
    }
    s.Tasks = newTaskService(s)
    s.TaskCollaborators = newTaskCollaboratorService(s)
    s.TaskFollowers = newTaskFollowerService(s)
    s.TaskReminders = newTaskReminderService(s)
    return s
}

type TaskService struct {
    service     *Service
}

func newTaskService(service *Service) *TaskService {
    return &TaskService{
        service: service,
    }
}
type TaskCollaboratorService struct {
    service     *Service
}

func newTaskCollaboratorService(service *Service) *TaskCollaboratorService {
    return &TaskCollaboratorService{
        service: service,
    }
}
type TaskFollowerService struct {
    service     *Service
}

func newTaskFollowerService(service *Service) *TaskFollowerService {
    return &TaskFollowerService{
        service: service,
    }
}
type TaskReminderService struct {
    service     *Service
}

func newTaskReminderService(service *Service) *TaskReminderService {
    return &TaskReminderService{
        service: service,
    }
}



type TaskCompleteReqCall struct {
	ctx    *core.Context
	tasks *TaskService
	pathParams  map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskCompleteReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}

func (rc *TaskCompleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    var result = &response.NoData{}
	req := request.NewRequest("task/v1/tasks/:task_id/complete", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.tasks.service.conf, req)
	return result, err
}

func (tasks *TaskService) Complete(ctx *core.Context,  optFns ...request.OptFn) *TaskCompleteReqCall {
	return &TaskCompleteReqCall{
		ctx:    ctx,
		tasks: tasks,
        pathParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskReminderCreateReqCall struct {
	ctx    *core.Context
	taskReminders *TaskReminderService
	body *Reminder
	pathParams  map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskReminderCreateReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}

func (rc *TaskReminderCreateReqCall) Do() (*TaskReminderCreateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    var result = &TaskReminderCreateResult{}
	req := request.NewRequest("task/v1/tasks/:task_id/reminders", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.taskReminders.service.conf, req)
	return result, err
}

func (taskReminders *TaskReminderService) Create(ctx *core.Context, body  *Reminder, optFns ...request.OptFn) *TaskReminderCreateReqCall {
	return &TaskReminderCreateReqCall{
		ctx:    ctx,
		taskReminders: taskReminders,
		body:        body,
        pathParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskCollaboratorCreateReqCall struct {
	ctx    *core.Context
	taskCollaborators *TaskCollaboratorService
	body *Collaborator
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskCollaboratorCreateReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskCollaboratorCreateReqCall) SetUserIdType(userIdType string){
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *TaskCollaboratorCreateReqCall) Do() (*TaskCollaboratorCreateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
    var result = &TaskCollaboratorCreateResult{}
	req := request.NewRequest("task/v1/tasks/:task_id/collaborators", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.taskCollaborators.service.conf, req)
	return result, err
}

func (taskCollaborators *TaskCollaboratorService) Create(ctx *core.Context, body  *Collaborator, optFns ...request.OptFn) *TaskCollaboratorCreateReqCall {
	return &TaskCollaboratorCreateReqCall{
		ctx:    ctx,
		taskCollaborators: taskCollaborators,
		body:        body,
        pathParams:        map[string]interface{}{},
        queryParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskFollowerCreateReqCall struct {
	ctx    *core.Context
	taskFollowers *TaskFollowerService
	body *Follower
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskFollowerCreateReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskFollowerCreateReqCall) SetUserIdType(userIdType string){
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *TaskFollowerCreateReqCall) Do() (*TaskFollowerCreateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
    var result = &TaskFollowerCreateResult{}
	req := request.NewRequest("task/v1/tasks/:task_id/followers", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.taskFollowers.service.conf, req)
	return result, err
}

func (taskFollowers *TaskFollowerService) Create(ctx *core.Context, body  *Follower, optFns ...request.OptFn) *TaskFollowerCreateReqCall {
	return &TaskFollowerCreateReqCall{
		ctx:    ctx,
		taskFollowers: taskFollowers,
		body:        body,
        pathParams:        map[string]interface{}{},
        queryParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskCreateReqCall struct {
	ctx    *core.Context
	tasks *TaskService
	body *Task
	queryParams map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskCreateReqCall) SetUserIdType(userIdType string){
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *TaskCreateReqCall) Do() (*TaskCreateResult, error) {
    rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
    var result = &TaskCreateResult{}
	req := request.NewRequest("task/v1/tasks", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.tasks.service.conf, req)
	return result, err
}

func (tasks *TaskService) Create(ctx *core.Context, body  *Task, optFns ...request.OptFn) *TaskCreateReqCall {
	return &TaskCreateReqCall{
		ctx:    ctx,
		tasks: tasks,
		body:        body,
        queryParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskReminderDeleteReqCall struct {
	ctx    *core.Context
	taskReminders *TaskReminderService
	pathParams  map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskReminderDeleteReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskReminderDeleteReqCall) SetReminderId(reminderId string){
	rc.pathParams["reminder_id"] = reminderId
}

func (rc *TaskReminderDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    var result = &response.NoData{}
	req := request.NewRequest("task/v1/tasks/:task_id/reminders/:reminder_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.taskReminders.service.conf, req)
	return result, err
}

func (taskReminders *TaskReminderService) Delete(ctx *core.Context,  optFns ...request.OptFn) *TaskReminderDeleteReqCall {
	return &TaskReminderDeleteReqCall{
		ctx:    ctx,
		taskReminders: taskReminders,
        pathParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskCollaboratorDeleteReqCall struct {
	ctx    *core.Context
	taskCollaborators *TaskCollaboratorService
	pathParams  map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskCollaboratorDeleteReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskCollaboratorDeleteReqCall) SetCollaboratorId(collaboratorId string){
	rc.pathParams["collaborator_id"] = collaboratorId
}

func (rc *TaskCollaboratorDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    var result = &response.NoData{}
	req := request.NewRequest("task/v1/tasks/:task_id/collaborators/:collaborator_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.taskCollaborators.service.conf, req)
	return result, err
}

func (taskCollaborators *TaskCollaboratorService) Delete(ctx *core.Context,  optFns ...request.OptFn) *TaskCollaboratorDeleteReqCall {
	return &TaskCollaboratorDeleteReqCall{
		ctx:    ctx,
		taskCollaborators: taskCollaborators,
        pathParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskDeleteReqCall struct {
	ctx    *core.Context
	tasks *TaskService
	pathParams  map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskDeleteReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}

func (rc *TaskDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    var result = &response.NoData{}
	req := request.NewRequest("task/v1/tasks/:task_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.tasks.service.conf, req)
	return result, err
}

func (tasks *TaskService) Delete(ctx *core.Context,  optFns ...request.OptFn) *TaskDeleteReqCall {
	return &TaskDeleteReqCall{
		ctx:    ctx,
		tasks: tasks,
        pathParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskFollowerDeleteReqCall struct {
	ctx    *core.Context
	taskFollowers *TaskFollowerService
	pathParams  map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskFollowerDeleteReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskFollowerDeleteReqCall) SetFollowerId(followerId string){
	rc.pathParams["follower_id"] = followerId
}

func (rc *TaskFollowerDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    var result = &response.NoData{}
	req := request.NewRequest("task/v1/tasks/:task_id/followers/:follower_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.taskFollowers.service.conf, req)
	return result, err
}

func (taskFollowers *TaskFollowerService) Delete(ctx *core.Context,  optFns ...request.OptFn) *TaskFollowerDeleteReqCall {
	return &TaskFollowerDeleteReqCall{
		ctx:    ctx,
		taskFollowers: taskFollowers,
        pathParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskGetReqCall struct {
	ctx    *core.Context
	tasks *TaskService
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskGetReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskGetReqCall) SetUserIdType(userIdType string){
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *TaskGetReqCall) Do() (*TaskGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
    var result = &TaskGetResult{}
	req := request.NewRequest("task/v1/tasks/:task_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.tasks.service.conf, req)
	return result, err
}

func (tasks *TaskService) Get(ctx *core.Context,  optFns ...request.OptFn) *TaskGetReqCall {
	return &TaskGetReqCall{
		ctx:    ctx,
		tasks: tasks,
        pathParams:        map[string]interface{}{},
        queryParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskReminderListReqCall struct {
	ctx    *core.Context
	taskReminders *TaskReminderService
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskReminderListReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskReminderListReqCall) SetPageSize(pageSize int){
	rc.queryParams["page_size"] = pageSize
}
func (rc *TaskReminderListReqCall) SetPageToken(pageToken string){
	rc.queryParams["page_token"] = pageToken
}

func (rc *TaskReminderListReqCall) Do() (*TaskReminderListResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
    var result = &TaskReminderListResult{}
	req := request.NewRequest("task/v1/tasks/:task_id/reminders", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.taskReminders.service.conf, req)
	return result, err
}

func (taskReminders *TaskReminderService) List(ctx *core.Context,  optFns ...request.OptFn) *TaskReminderListReqCall {
	return &TaskReminderListReqCall{
		ctx:    ctx,
		taskReminders: taskReminders,
        pathParams:        map[string]interface{}{},
        queryParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskCollaboratorListReqCall struct {
	ctx    *core.Context
	taskCollaborators *TaskCollaboratorService
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskCollaboratorListReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskCollaboratorListReqCall) SetPageSize(pageSize int){
	rc.queryParams["page_size"] = pageSize
}
func (rc *TaskCollaboratorListReqCall) SetPageToken(pageToken string){
	rc.queryParams["page_token"] = pageToken
}
func (rc *TaskCollaboratorListReqCall) SetUserIdType(userIdType string){
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *TaskCollaboratorListReqCall) Do() (*TaskCollaboratorListResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
    var result = &TaskCollaboratorListResult{}
	req := request.NewRequest("task/v1/tasks/:task_id/collaborators", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.taskCollaborators.service.conf, req)
	return result, err
}

func (taskCollaborators *TaskCollaboratorService) List(ctx *core.Context,  optFns ...request.OptFn) *TaskCollaboratorListReqCall {
	return &TaskCollaboratorListReqCall{
		ctx:    ctx,
		taskCollaborators: taskCollaborators,
        pathParams:        map[string]interface{}{},
        queryParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskFollowerListReqCall struct {
	ctx    *core.Context
	taskFollowers *TaskFollowerService
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskFollowerListReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskFollowerListReqCall) SetPageSize(pageSize int){
	rc.queryParams["page_size"] = pageSize
}
func (rc *TaskFollowerListReqCall) SetPageToken(pageToken string){
	rc.queryParams["page_token"] = pageToken
}
func (rc *TaskFollowerListReqCall) SetUserIdType(userIdType string){
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *TaskFollowerListReqCall) Do() (*TaskFollowerListResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
    var result = &TaskFollowerListResult{}
	req := request.NewRequest("task/v1/tasks/:task_id/followers", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.taskFollowers.service.conf, req)
	return result, err
}

func (taskFollowers *TaskFollowerService) List(ctx *core.Context,  optFns ...request.OptFn) *TaskFollowerListReqCall {
	return &TaskFollowerListReqCall{
		ctx:    ctx,
		taskFollowers: taskFollowers,
        pathParams:        map[string]interface{}{},
        queryParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskPatchReqCall struct {
	ctx    *core.Context
	tasks *TaskService
	body *TaskPatchReqBody
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskPatchReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}
func (rc *TaskPatchReqCall) SetUserIdType(userIdType string){
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *TaskPatchReqCall) Do() (*TaskPatchResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
    var result = &TaskPatchResult{}
	req := request.NewRequest("task/v1/tasks/:task_id", "PATCH",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.tasks.service.conf, req)
	return result, err
}

func (tasks *TaskService) Patch(ctx *core.Context, body  *TaskPatchReqBody, optFns ...request.OptFn) *TaskPatchReqCall {
	return &TaskPatchReqCall{
		ctx:    ctx,
		tasks: tasks,
		body:        body,
        pathParams:        map[string]interface{}{},
        queryParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}


type TaskUncompleteReqCall struct {
	ctx    *core.Context
	tasks *TaskService
	pathParams  map[string]interface{}
	optFns   []request.OptFn
}
func (rc *TaskUncompleteReqCall) SetTaskId(taskId string){
	rc.pathParams["task_id"] = taskId
}

func (rc *TaskUncompleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
    var result = &response.NoData{}
	req := request.NewRequest("task/v1/tasks/:task_id/uncomplete", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.tasks.service.conf, req)
	return result, err
}

func (tasks *TaskService) Uncomplete(ctx *core.Context,  optFns ...request.OptFn) *TaskUncompleteReqCall {
	return &TaskUncompleteReqCall{
		ctx:    ctx,
		tasks: tasks,
        pathParams:        map[string]interface{}{},
		optFns:      optFns,
	}
}
