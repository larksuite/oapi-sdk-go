// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
)

type Service struct {
	conf   *config.Config
	Images *ImageService
}

func NewService(conf *config.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Images = newImageService(s)
	return s
}

type ImageService struct {
	service *Service
}

func newImageService(service *Service) *ImageService {
	return &ImageService{
		service: service,
	}
}

type ImageBasicRecognizeReqCall struct {
	ctx    *core.Context
	images *ImageService
	body   *ImageBasicRecognizeReqBody
	optFns []request.OptFn
}

func (rc *ImageBasicRecognizeReqCall) Do() (*ImageBasicRecognizeResult, error) {
	var result = &ImageBasicRecognizeResult{}
	req := request.NewRequest("/open-apis/optical_char_recognition/v1/image/basic_recognize", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.images.service.conf, req)
	return result, err
}

func (images *ImageService) BasicRecognize(ctx *core.Context, body *ImageBasicRecognizeReqBody, optFns ...request.OptFn) *ImageBasicRecognizeReqCall {
	return &ImageBasicRecognizeReqCall{
		ctx:    ctx,
		images: images,
		body:   body,
		optFns: optFns,
	}
}
