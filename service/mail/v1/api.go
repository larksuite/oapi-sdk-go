// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/api/core/response"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
)

type Service struct {
	conf                       *config.Config
	MailgroupMembers           *MailgroupMemberService
	MailgroupPermissionMembers *MailgroupPermissionMemberService
	PublicMailboxs             *PublicMailboxService
	PublicMailboxMembers       *PublicMailboxMemberService
	Mailgroups                 *MailgroupService
}

func NewService(conf *config.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.MailgroupMembers = newMailgroupMemberService(s)
	s.MailgroupPermissionMembers = newMailgroupPermissionMemberService(s)
	s.PublicMailboxs = newPublicMailboxService(s)
	s.PublicMailboxMembers = newPublicMailboxMemberService(s)
	s.Mailgroups = newMailgroupService(s)
	return s
}

type MailgroupMemberService struct {
	service *Service
}

func newMailgroupMemberService(service *Service) *MailgroupMemberService {
	return &MailgroupMemberService{
		service: service,
	}
}

type MailgroupPermissionMemberService struct {
	service *Service
}

func newMailgroupPermissionMemberService(service *Service) *MailgroupPermissionMemberService {
	return &MailgroupPermissionMemberService{
		service: service,
	}
}

type PublicMailboxService struct {
	service *Service
}

func newPublicMailboxService(service *Service) *PublicMailboxService {
	return &PublicMailboxService{
		service: service,
	}
}

type PublicMailboxMemberService struct {
	service *Service
}

func newPublicMailboxMemberService(service *Service) *PublicMailboxMemberService {
	return &PublicMailboxMemberService{
		service: service,
	}
}

type MailgroupService struct {
	service *Service
}

func newMailgroupService(service *Service) *MailgroupService {
	return &MailgroupService{
		service: service,
	}
}

type MailgroupPermissionMemberDeleteReqCall struct {
	ctx                        *core.Context
	mailgroupPermissionMembers *MailgroupPermissionMemberService
	pathParams                 map[string]interface{}
	optFns                     []request.OptFn
}

func (rc *MailgroupPermissionMemberDeleteReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}
func (rc *MailgroupPermissionMemberDeleteReqCall) SetPermissionMemberId(permissionMemberId string) {
	rc.pathParams["permission_member_id"] = permissionMemberId
}

func (rc *MailgroupPermissionMemberDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroupPermissionMembers.service.conf, req)
	return result, err
}

func (mailgroupPermissionMembers *MailgroupPermissionMemberService) Delete(ctx *core.Context, optFns ...request.OptFn) *MailgroupPermissionMemberDeleteReqCall {
	return &MailgroupPermissionMemberDeleteReqCall{
		ctx:                        ctx,
		mailgroupPermissionMembers: mailgroupPermissionMembers,
		pathParams:                 map[string]interface{}{},
		optFns:                     optFns,
	}
}

type PublicMailboxMemberGetReqCall struct {
	ctx                  *core.Context
	publicMailboxMembers *PublicMailboxMemberService
	pathParams           map[string]interface{}
	queryParams          map[string]interface{}
	optFns               []request.OptFn
}

func (rc *PublicMailboxMemberGetReqCall) SetPublicMailboxId(publicMailboxId string) {
	rc.pathParams["public_mailbox_id"] = publicMailboxId
}
func (rc *PublicMailboxMemberGetReqCall) SetMemberId(memberId string) {
	rc.pathParams["member_id"] = memberId
}
func (rc *PublicMailboxMemberGetReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *PublicMailboxMemberGetReqCall) Do() (*PublicMailboxMember, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &PublicMailboxMember{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxMembers.service.conf, req)
	return result, err
}

func (publicMailboxMembers *PublicMailboxMemberService) Get(ctx *core.Context, optFns ...request.OptFn) *PublicMailboxMemberGetReqCall {
	return &PublicMailboxMemberGetReqCall{
		ctx:                  ctx,
		publicMailboxMembers: publicMailboxMembers,
		pathParams:           map[string]interface{}{},
		queryParams:          map[string]interface{}{},
		optFns:               optFns,
	}
}

type PublicMailboxMemberDeleteReqCall struct {
	ctx                  *core.Context
	publicMailboxMembers *PublicMailboxMemberService
	pathParams           map[string]interface{}
	optFns               []request.OptFn
}

func (rc *PublicMailboxMemberDeleteReqCall) SetPublicMailboxId(publicMailboxId string) {
	rc.pathParams["public_mailbox_id"] = publicMailboxId
}
func (rc *PublicMailboxMemberDeleteReqCall) SetMemberId(memberId string) {
	rc.pathParams["member_id"] = memberId
}

func (rc *PublicMailboxMemberDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxMembers.service.conf, req)
	return result, err
}

func (publicMailboxMembers *PublicMailboxMemberService) Delete(ctx *core.Context, optFns ...request.OptFn) *PublicMailboxMemberDeleteReqCall {
	return &PublicMailboxMemberDeleteReqCall{
		ctx:                  ctx,
		publicMailboxMembers: publicMailboxMembers,
		pathParams:           map[string]interface{}{},
		optFns:               optFns,
	}
}

type MailgroupMemberListReqCall struct {
	ctx              *core.Context
	mailgroupMembers *MailgroupMemberService
	pathParams       map[string]interface{}
	queryParams      map[string]interface{}
	optFns           []request.OptFn
}

func (rc *MailgroupMemberListReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}
func (rc *MailgroupMemberListReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *MailgroupMemberListReqCall) SetDepartmentIdType(departmentIdType string) {
	rc.queryParams["department_id_type"] = departmentIdType
}
func (rc *MailgroupMemberListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *MailgroupMemberListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *MailgroupMemberListReqCall) Do() (*MailgroupMemberListResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &MailgroupMemberListResult{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id/members", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroupMembers.service.conf, req)
	return result, err
}

func (mailgroupMembers *MailgroupMemberService) List(ctx *core.Context, optFns ...request.OptFn) *MailgroupMemberListReqCall {
	return &MailgroupMemberListReqCall{
		ctx:              ctx,
		mailgroupMembers: mailgroupMembers,
		pathParams:       map[string]interface{}{},
		queryParams:      map[string]interface{}{},
		optFns:           optFns,
	}
}

type MailgroupPermissionMemberGetReqCall struct {
	ctx                        *core.Context
	mailgroupPermissionMembers *MailgroupPermissionMemberService
	pathParams                 map[string]interface{}
	queryParams                map[string]interface{}
	optFns                     []request.OptFn
}

func (rc *MailgroupPermissionMemberGetReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}
func (rc *MailgroupPermissionMemberGetReqCall) SetPermissionMemberId(permissionMemberId string) {
	rc.pathParams["permission_member_id"] = permissionMemberId
}
func (rc *MailgroupPermissionMemberGetReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *MailgroupPermissionMemberGetReqCall) SetDepartmentIdType(departmentIdType string) {
	rc.queryParams["department_id_type"] = departmentIdType
}

func (rc *MailgroupPermissionMemberGetReqCall) Do() (*MailgroupPermissionMember, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &MailgroupPermissionMember{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroupPermissionMembers.service.conf, req)
	return result, err
}

func (mailgroupPermissionMembers *MailgroupPermissionMemberService) Get(ctx *core.Context, optFns ...request.OptFn) *MailgroupPermissionMemberGetReqCall {
	return &MailgroupPermissionMemberGetReqCall{
		ctx:                        ctx,
		mailgroupPermissionMembers: mailgroupPermissionMembers,
		pathParams:                 map[string]interface{}{},
		queryParams:                map[string]interface{}{},
		optFns:                     optFns,
	}
}

type MailgroupPermissionMemberListReqCall struct {
	ctx                        *core.Context
	mailgroupPermissionMembers *MailgroupPermissionMemberService
	pathParams                 map[string]interface{}
	queryParams                map[string]interface{}
	optFns                     []request.OptFn
}

func (rc *MailgroupPermissionMemberListReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}
func (rc *MailgroupPermissionMemberListReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *MailgroupPermissionMemberListReqCall) SetDepartmentIdType(departmentIdType string) {
	rc.queryParams["department_id_type"] = departmentIdType
}
func (rc *MailgroupPermissionMemberListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *MailgroupPermissionMemberListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *MailgroupPermissionMemberListReqCall) Do() (*MailgroupPermissionMemberListResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &MailgroupPermissionMemberListResult{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroupPermissionMembers.service.conf, req)
	return result, err
}

func (mailgroupPermissionMembers *MailgroupPermissionMemberService) List(ctx *core.Context, optFns ...request.OptFn) *MailgroupPermissionMemberListReqCall {
	return &MailgroupPermissionMemberListReqCall{
		ctx:                        ctx,
		mailgroupPermissionMembers: mailgroupPermissionMembers,
		pathParams:                 map[string]interface{}{},
		queryParams:                map[string]interface{}{},
		optFns:                     optFns,
	}
}

type PublicMailboxUpdateReqCall struct {
	ctx            *core.Context
	publicMailboxs *PublicMailboxService
	body           *PublicMailbox
	pathParams     map[string]interface{}
	optFns         []request.OptFn
}

func (rc *PublicMailboxUpdateReqCall) SetPublicMailboxId(publicMailboxId string) {
	rc.pathParams["public_mailbox_id"] = publicMailboxId
}

func (rc *PublicMailboxUpdateReqCall) Do() (*PublicMailbox, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &PublicMailbox{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxs.service.conf, req)
	return result, err
}

func (publicMailboxs *PublicMailboxService) Update(ctx *core.Context, body *PublicMailbox, optFns ...request.OptFn) *PublicMailboxUpdateReqCall {
	return &PublicMailboxUpdateReqCall{
		ctx:            ctx,
		publicMailboxs: publicMailboxs,
		body:           body,
		pathParams:     map[string]interface{}{},
		optFns:         optFns,
	}
}

type PublicMailboxMemberClearReqCall struct {
	ctx                  *core.Context
	publicMailboxMembers *PublicMailboxMemberService
	pathParams           map[string]interface{}
	optFns               []request.OptFn
}

func (rc *PublicMailboxMemberClearReqCall) SetPublicMailboxId(publicMailboxId string) {
	rc.pathParams["public_mailbox_id"] = publicMailboxId
}

func (rc *PublicMailboxMemberClearReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxMembers.service.conf, req)
	return result, err
}

func (publicMailboxMembers *PublicMailboxMemberService) Clear(ctx *core.Context, optFns ...request.OptFn) *PublicMailboxMemberClearReqCall {
	return &PublicMailboxMemberClearReqCall{
		ctx:                  ctx,
		publicMailboxMembers: publicMailboxMembers,
		pathParams:           map[string]interface{}{},
		optFns:               optFns,
	}
}

type PublicMailboxMemberListReqCall struct {
	ctx                  *core.Context
	publicMailboxMembers *PublicMailboxMemberService
	pathParams           map[string]interface{}
	queryParams          map[string]interface{}
	optFns               []request.OptFn
}

func (rc *PublicMailboxMemberListReqCall) SetPublicMailboxId(publicMailboxId string) {
	rc.pathParams["public_mailbox_id"] = publicMailboxId
}
func (rc *PublicMailboxMemberListReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *PublicMailboxMemberListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *PublicMailboxMemberListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *PublicMailboxMemberListReqCall) Do() (*PublicMailboxMemberListResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &PublicMailboxMemberListResult{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxMembers.service.conf, req)
	return result, err
}

func (publicMailboxMembers *PublicMailboxMemberService) List(ctx *core.Context, optFns ...request.OptFn) *PublicMailboxMemberListReqCall {
	return &PublicMailboxMemberListReqCall{
		ctx:                  ctx,
		publicMailboxMembers: publicMailboxMembers,
		pathParams:           map[string]interface{}{},
		queryParams:          map[string]interface{}{},
		optFns:               optFns,
	}
}

type PublicMailboxMemberCreateReqCall struct {
	ctx                  *core.Context
	publicMailboxMembers *PublicMailboxMemberService
	body                 *PublicMailboxMember
	pathParams           map[string]interface{}
	queryParams          map[string]interface{}
	optFns               []request.OptFn
}

func (rc *PublicMailboxMemberCreateReqCall) SetPublicMailboxId(publicMailboxId string) {
	rc.pathParams["public_mailbox_id"] = publicMailboxId
}
func (rc *PublicMailboxMemberCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *PublicMailboxMemberCreateReqCall) Do() (*PublicMailboxMember, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &PublicMailboxMember{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxMembers.service.conf, req)
	return result, err
}

func (publicMailboxMembers *PublicMailboxMemberService) Create(ctx *core.Context, body *PublicMailboxMember, optFns ...request.OptFn) *PublicMailboxMemberCreateReqCall {
	return &PublicMailboxMemberCreateReqCall{
		ctx:                  ctx,
		publicMailboxMembers: publicMailboxMembers,
		body:                 body,
		pathParams:           map[string]interface{}{},
		queryParams:          map[string]interface{}{},
		optFns:               optFns,
	}
}

type MailgroupGetReqCall struct {
	ctx        *core.Context
	mailgroups *MailgroupService
	pathParams map[string]interface{}
	optFns     []request.OptFn
}

func (rc *MailgroupGetReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}

func (rc *MailgroupGetReqCall) Do() (*Mailgroup, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &Mailgroup{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroups.service.conf, req)
	return result, err
}

func (mailgroups *MailgroupService) Get(ctx *core.Context, optFns ...request.OptFn) *MailgroupGetReqCall {
	return &MailgroupGetReqCall{
		ctx:        ctx,
		mailgroups: mailgroups,
		pathParams: map[string]interface{}{},
		optFns:     optFns,
	}
}

type MailgroupUpdateReqCall struct {
	ctx        *core.Context
	mailgroups *MailgroupService
	body       *Mailgroup
	pathParams map[string]interface{}
	optFns     []request.OptFn
}

func (rc *MailgroupUpdateReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}

func (rc *MailgroupUpdateReqCall) Do() (*Mailgroup, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &Mailgroup{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroups.service.conf, req)
	return result, err
}

func (mailgroups *MailgroupService) Update(ctx *core.Context, body *Mailgroup, optFns ...request.OptFn) *MailgroupUpdateReqCall {
	return &MailgroupUpdateReqCall{
		ctx:        ctx,
		mailgroups: mailgroups,
		body:       body,
		pathParams: map[string]interface{}{},
		optFns:     optFns,
	}
}

type PublicMailboxListReqCall struct {
	ctx            *core.Context
	publicMailboxs *PublicMailboxService
	queryParams    map[string]interface{}
	optFns         []request.OptFn
}

func (rc *PublicMailboxListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *PublicMailboxListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *PublicMailboxListReqCall) Do() (*PublicMailboxListResult, error) {
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &PublicMailboxListResult{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxs.service.conf, req)
	return result, err
}

func (publicMailboxs *PublicMailboxService) List(ctx *core.Context, optFns ...request.OptFn) *PublicMailboxListReqCall {
	return &PublicMailboxListReqCall{
		ctx:            ctx,
		publicMailboxs: publicMailboxs,
		queryParams:    map[string]interface{}{},
		optFns:         optFns,
	}
}

type MailgroupDeleteReqCall struct {
	ctx        *core.Context
	mailgroups *MailgroupService
	pathParams map[string]interface{}
	optFns     []request.OptFn
}

func (rc *MailgroupDeleteReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}

func (rc *MailgroupDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroups.service.conf, req)
	return result, err
}

func (mailgroups *MailgroupService) Delete(ctx *core.Context, optFns ...request.OptFn) *MailgroupDeleteReqCall {
	return &MailgroupDeleteReqCall{
		ctx:        ctx,
		mailgroups: mailgroups,
		pathParams: map[string]interface{}{},
		optFns:     optFns,
	}
}

type MailgroupPermissionMemberCreateReqCall struct {
	ctx                        *core.Context
	mailgroupPermissionMembers *MailgroupPermissionMemberService
	body                       *MailgroupPermissionMember
	pathParams                 map[string]interface{}
	queryParams                map[string]interface{}
	optFns                     []request.OptFn
}

func (rc *MailgroupPermissionMemberCreateReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}
func (rc *MailgroupPermissionMemberCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *MailgroupPermissionMemberCreateReqCall) SetDepartmentIdType(departmentIdType string) {
	rc.queryParams["department_id_type"] = departmentIdType
}

func (rc *MailgroupPermissionMemberCreateReqCall) Do() (*MailgroupPermissionMember, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &MailgroupPermissionMember{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroupPermissionMembers.service.conf, req)
	return result, err
}

func (mailgroupPermissionMembers *MailgroupPermissionMemberService) Create(ctx *core.Context, body *MailgroupPermissionMember, optFns ...request.OptFn) *MailgroupPermissionMemberCreateReqCall {
	return &MailgroupPermissionMemberCreateReqCall{
		ctx:                        ctx,
		mailgroupPermissionMembers: mailgroupPermissionMembers,
		body:                       body,
		pathParams:                 map[string]interface{}{},
		queryParams:                map[string]interface{}{},
		optFns:                     optFns,
	}
}

type PublicMailboxCreateReqCall struct {
	ctx            *core.Context
	publicMailboxs *PublicMailboxService
	body           *PublicMailbox
	optFns         []request.OptFn
}

func (rc *PublicMailboxCreateReqCall) Do() (*PublicMailbox, error) {
	var result = &PublicMailbox{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxs.service.conf, req)
	return result, err
}

func (publicMailboxs *PublicMailboxService) Create(ctx *core.Context, body *PublicMailbox, optFns ...request.OptFn) *PublicMailboxCreateReqCall {
	return &PublicMailboxCreateReqCall{
		ctx:            ctx,
		publicMailboxs: publicMailboxs,
		body:           body,
		optFns:         optFns,
	}
}

type MailgroupMemberGetReqCall struct {
	ctx              *core.Context
	mailgroupMembers *MailgroupMemberService
	pathParams       map[string]interface{}
	queryParams      map[string]interface{}
	optFns           []request.OptFn
}

func (rc *MailgroupMemberGetReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}
func (rc *MailgroupMemberGetReqCall) SetMemberId(memberId string) {
	rc.pathParams["member_id"] = memberId
}
func (rc *MailgroupMemberGetReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *MailgroupMemberGetReqCall) SetDepartmentIdType(departmentIdType string) {
	rc.queryParams["department_id_type"] = departmentIdType
}

func (rc *MailgroupMemberGetReqCall) Do() (*MailgroupMember, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &MailgroupMember{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroupMembers.service.conf, req)
	return result, err
}

func (mailgroupMembers *MailgroupMemberService) Get(ctx *core.Context, optFns ...request.OptFn) *MailgroupMemberGetReqCall {
	return &MailgroupMemberGetReqCall{
		ctx:              ctx,
		mailgroupMembers: mailgroupMembers,
		pathParams:       map[string]interface{}{},
		queryParams:      map[string]interface{}{},
		optFns:           optFns,
	}
}

type PublicMailboxGetReqCall struct {
	ctx            *core.Context
	publicMailboxs *PublicMailboxService
	pathParams     map[string]interface{}
	optFns         []request.OptFn
}

func (rc *PublicMailboxGetReqCall) SetPublicMailboxId(publicMailboxId string) {
	rc.pathParams["public_mailbox_id"] = publicMailboxId
}

func (rc *PublicMailboxGetReqCall) Do() (*PublicMailbox, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &PublicMailbox{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxs.service.conf, req)
	return result, err
}

func (publicMailboxs *PublicMailboxService) Get(ctx *core.Context, optFns ...request.OptFn) *PublicMailboxGetReqCall {
	return &PublicMailboxGetReqCall{
		ctx:            ctx,
		publicMailboxs: publicMailboxs,
		pathParams:     map[string]interface{}{},
		optFns:         optFns,
	}
}

type PublicMailboxPatchReqCall struct {
	ctx            *core.Context
	publicMailboxs *PublicMailboxService
	body           *PublicMailbox
	pathParams     map[string]interface{}
	optFns         []request.OptFn
}

func (rc *PublicMailboxPatchReqCall) SetPublicMailboxId(publicMailboxId string) {
	rc.pathParams["public_mailbox_id"] = publicMailboxId
}

func (rc *PublicMailboxPatchReqCall) Do() (*PublicMailbox, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &PublicMailbox{}
	req := request.NewRequest("/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", "PATCH",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.publicMailboxs.service.conf, req)
	return result, err
}

func (publicMailboxs *PublicMailboxService) Patch(ctx *core.Context, body *PublicMailbox, optFns ...request.OptFn) *PublicMailboxPatchReqCall {
	return &PublicMailboxPatchReqCall{
		ctx:            ctx,
		publicMailboxs: publicMailboxs,
		body:           body,
		pathParams:     map[string]interface{}{},
		optFns:         optFns,
	}
}

type MailgroupCreateReqCall struct {
	ctx        *core.Context
	mailgroups *MailgroupService
	body       *Mailgroup
	optFns     []request.OptFn
}

func (rc *MailgroupCreateReqCall) Do() (*Mailgroup, error) {
	var result = &Mailgroup{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroups.service.conf, req)
	return result, err
}

func (mailgroups *MailgroupService) Create(ctx *core.Context, body *Mailgroup, optFns ...request.OptFn) *MailgroupCreateReqCall {
	return &MailgroupCreateReqCall{
		ctx:        ctx,
		mailgroups: mailgroups,
		body:       body,
		optFns:     optFns,
	}
}

type MailgroupListReqCall struct {
	ctx         *core.Context
	mailgroups  *MailgroupService
	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *MailgroupListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *MailgroupListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *MailgroupListReqCall) Do() (*MailgroupListResult, error) {
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &MailgroupListResult{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroups.service.conf, req)
	return result, err
}

func (mailgroups *MailgroupService) List(ctx *core.Context, optFns ...request.OptFn) *MailgroupListReqCall {
	return &MailgroupListReqCall{
		ctx:         ctx,
		mailgroups:  mailgroups,
		queryParams: map[string]interface{}{},
		optFns:      optFns,
	}
}

type MailgroupPatchReqCall struct {
	ctx        *core.Context
	mailgroups *MailgroupService
	body       *Mailgroup
	pathParams map[string]interface{}
	optFns     []request.OptFn
}

func (rc *MailgroupPatchReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}

func (rc *MailgroupPatchReqCall) Do() (*Mailgroup, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &Mailgroup{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id", "PATCH",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroups.service.conf, req)
	return result, err
}

func (mailgroups *MailgroupService) Patch(ctx *core.Context, body *Mailgroup, optFns ...request.OptFn) *MailgroupPatchReqCall {
	return &MailgroupPatchReqCall{
		ctx:        ctx,
		mailgroups: mailgroups,
		body:       body,
		pathParams: map[string]interface{}{},
		optFns:     optFns,
	}
}

type MailgroupMemberCreateReqCall struct {
	ctx              *core.Context
	mailgroupMembers *MailgroupMemberService
	body             *MailgroupMember
	pathParams       map[string]interface{}
	queryParams      map[string]interface{}
	optFns           []request.OptFn
}

func (rc *MailgroupMemberCreateReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}
func (rc *MailgroupMemberCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}
func (rc *MailgroupMemberCreateReqCall) SetDepartmentIdType(departmentIdType string) {
	rc.queryParams["department_id_type"] = departmentIdType
}

func (rc *MailgroupMemberCreateReqCall) Do() (*MailgroupMember, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &MailgroupMember{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id/members", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroupMembers.service.conf, req)
	return result, err
}

func (mailgroupMembers *MailgroupMemberService) Create(ctx *core.Context, body *MailgroupMember, optFns ...request.OptFn) *MailgroupMemberCreateReqCall {
	return &MailgroupMemberCreateReqCall{
		ctx:              ctx,
		mailgroupMembers: mailgroupMembers,
		body:             body,
		pathParams:       map[string]interface{}{},
		queryParams:      map[string]interface{}{},
		optFns:           optFns,
	}
}

type MailgroupMemberDeleteReqCall struct {
	ctx              *core.Context
	mailgroupMembers *MailgroupMemberService
	pathParams       map[string]interface{}
	optFns           []request.OptFn
}

func (rc *MailgroupMemberDeleteReqCall) SetMailgroupId(mailgroupId string) {
	rc.pathParams["mailgroup_id"] = mailgroupId
}
func (rc *MailgroupMemberDeleteReqCall) SetMemberId(memberId string) {
	rc.pathParams["member_id"] = memberId
}

func (rc *MailgroupMemberDeleteReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.mailgroupMembers.service.conf, req)
	return result, err
}

func (mailgroupMembers *MailgroupMemberService) Delete(ctx *core.Context, optFns ...request.OptFn) *MailgroupMemberDeleteReqCall {
	return &MailgroupMemberDeleteReqCall{
		ctx:              ctx,
		mailgroupMembers: mailgroupMembers,
		pathParams:       map[string]interface{}{},
		optFns:           optFns,
	}
}
