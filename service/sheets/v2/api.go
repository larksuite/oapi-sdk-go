// Code generated by lark suite oapi sdk gen
package v2

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/api/core/response"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
)

type Service struct {
	conf          *config.Config
	Spreadsheetss *SpreadsheetsService
}

func NewService(conf *config.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Spreadsheetss = newSpreadsheetsService(s)
	return s
}

type SpreadsheetsService struct {
	service *Service
}

func newSpreadsheetsService(service *Service) *SpreadsheetsService {
	return &SpreadsheetsService{
		service: service,
	}
}

type SpreadsheetsConditionFormatsBatchCreateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsConditionFormatsBatchCreateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsConditionFormatsBatchCreateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsConditionFormatsBatchCreateReqCall) Do() (*SpreadsheetsConditionFormatsBatchCreateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsConditionFormatsBatchCreateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_create", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ConditionFormatsBatchCreate(ctx *core.Context, body *SpreadsheetsConditionFormatsBatchCreateReqBody, optFns ...request.OptFn) *SpreadsheetsConditionFormatsBatchCreateReqCall {
	return &SpreadsheetsConditionFormatsBatchCreateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsConditionFormatsBatchDeleteReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsConditionFormatsBatchDeleteReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsConditionFormatsBatchDeleteReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsConditionFormatsBatchDeleteReqCall) Do() (*SpreadsheetsConditionFormatsBatchDeleteResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsConditionFormatsBatchDeleteResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_delete", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ConditionFormatsBatchDelete(ctx *core.Context, body *SpreadsheetsConditionFormatsBatchDeleteReqBody, optFns ...request.OptFn) *SpreadsheetsConditionFormatsBatchDeleteReqCall {
	return &SpreadsheetsConditionFormatsBatchDeleteReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsConditionFormatsBatchGetReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	pathParams    map[string]interface{}
	queryParams   map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsConditionFormatsBatchGetReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}
func (rc *SpreadsheetsConditionFormatsBatchGetReqCall) SetSheetIds(sheetIds ...string) {
	rc.queryParams["sheet_ids"] = sheetIds
}

func (rc *SpreadsheetsConditionFormatsBatchGetReqCall) Do() (*SpreadsheetsConditionFormatsBatchGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &SpreadsheetsConditionFormatsBatchGetResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ConditionFormatsBatchGet(ctx *core.Context, optFns ...request.OptFn) *SpreadsheetsConditionFormatsBatchGetReqCall {
	return &SpreadsheetsConditionFormatsBatchGetReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		pathParams:    map[string]interface{}{},
		queryParams:   map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsConditionFormatsBatchUpdateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsConditionFormatsBatchUpdateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsConditionFormatsBatchUpdateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsConditionFormatsBatchUpdateReqCall) Do() (*SpreadsheetsConditionFormatsBatchUpdateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsConditionFormatsBatchUpdateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ConditionFormatsBatchUpdate(ctx *core.Context, body *SpreadsheetsConditionFormatsBatchUpdateReqBody, optFns ...request.OptFn) *SpreadsheetsConditionFormatsBatchUpdateReqCall {
	return &SpreadsheetsConditionFormatsBatchUpdateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsDataValidationCreateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsDataValidationCreateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsDataValidationCreateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsDataValidationCreateReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) DataValidationCreate(ctx *core.Context, body *SpreadsheetsDataValidationCreateReqBody, optFns ...request.OptFn) *SpreadsheetsDataValidationCreateReqCall {
	return &SpreadsheetsDataValidationCreateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsDataValidationDeleteReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsDataValidationDeleteReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsDataValidationDeleteReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsDataValidationDeleteReqCall) Do() (*SpreadsheetsDataValidationDeleteResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsDataValidationDeleteResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) DataValidationDelete(ctx *core.Context, body *SpreadsheetsDataValidationDeleteReqBody, optFns ...request.OptFn) *SpreadsheetsDataValidationDeleteReqCall {
	return &SpreadsheetsDataValidationDeleteReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsDataValidationGetReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsDataValidationGetReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}
func (rc *SpreadsheetsDataValidationGetReqCall) SetRange(range_ string) {
	rc.pathParams["range"] = range_
}
func (rc *SpreadsheetsDataValidationGetReqCall) SetDataValidationType(dataValidationType string) {
	rc.pathParams["dataValidationType"] = dataValidationType
}

func (rc *SpreadsheetsDataValidationGetReqCall) Do() (*SpreadsheetsDataValidationGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsDataValidationGetResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) DataValidationGet(ctx *core.Context, optFns ...request.OptFn) *SpreadsheetsDataValidationGetReqCall {
	return &SpreadsheetsDataValidationGetReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsDataValidationUpdateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsDataValidationUpdateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsDataValidationUpdateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}
func (rc *SpreadsheetsDataValidationUpdateReqCall) SetSheetId(sheetId string) {
	rc.pathParams["sheetId"] = sheetId
}
func (rc *SpreadsheetsDataValidationUpdateReqCall) SetDataValidationId(dataValidationId int) {
	rc.pathParams["dataValidationId"] = dataValidationId
}

func (rc *SpreadsheetsDataValidationUpdateReqCall) Do() (*SpreadsheetsDataValidationUpdateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsDataValidationUpdateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation/:sheetId/:dataValidationId", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) DataValidationUpdate(ctx *core.Context, body *SpreadsheetsDataValidationUpdateReqBody, optFns ...request.OptFn) *SpreadsheetsDataValidationUpdateReqCall {
	return &SpreadsheetsDataValidationUpdateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsDimensionRangeAddReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsDimensionRangeAddReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsDimensionRangeAddReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsDimensionRangeAddReqCall) Do() (*SpreadsheetsDimensionRangeAddResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsDimensionRangeAddResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) DimensionRangeAdd(ctx *core.Context, body *SpreadsheetsDimensionRangeAddReqBody, optFns ...request.OptFn) *SpreadsheetsDimensionRangeAddReqCall {
	return &SpreadsheetsDimensionRangeAddReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsDimensionRangeDeleteReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsDimensionRangeDeleteReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsDimensionRangeDeleteReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsDimensionRangeDeleteReqCall) Do() (*SpreadsheetsDimensionRangeDeleteResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsDimensionRangeDeleteResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) DimensionRangeDelete(ctx *core.Context, body *SpreadsheetsDimensionRangeDeleteReqBody, optFns ...request.OptFn) *SpreadsheetsDimensionRangeDeleteReqCall {
	return &SpreadsheetsDimensionRangeDeleteReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsDimensionRangeUpdateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsDimensionRangeUpdateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsDimensionRangeUpdateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsDimensionRangeUpdateReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) DimensionRangeUpdate(ctx *core.Context, body *SpreadsheetsDimensionRangeUpdateReqBody, optFns ...request.OptFn) *SpreadsheetsDimensionRangeUpdateReqCall {
	return &SpreadsheetsDimensionRangeUpdateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsImportReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsImportReqBody
	optFns        []request.OptFn
}

func (rc *SpreadsheetsImportReqCall) Do() (*SpreadsheetsImportResult, error) {
	var result = &SpreadsheetsImportResult{}
	req := request.NewRequest("/open-apis/sheets/v2/import", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) Import(ctx *core.Context, body *SpreadsheetsImportReqBody, optFns ...request.OptFn) *SpreadsheetsImportReqCall {
	return &SpreadsheetsImportReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		optFns:        optFns,
	}
}

type SpreadsheetsImportResultReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	queryParams   map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsImportResultReqCall) SetTicket(ticket string) {
	rc.queryParams["ticket"] = ticket
}

func (rc *SpreadsheetsImportResultReqCall) Do() (*SpreadsheetsImportResultResult, error) {
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &SpreadsheetsImportResultResult{}
	req := request.NewRequest("/open-apis/sheets/v2/import/result", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ImportResult(ctx *core.Context, optFns ...request.OptFn) *SpreadsheetsImportResultReqCall {
	return &SpreadsheetsImportResultReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		queryParams:   map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsInsertDimensionRangeReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsInsertDimensionRangeReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsInsertDimensionRangeReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsInsertDimensionRangeReqCall) Do() (*response.NoData, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &response.NoData{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/insert_dimension_range", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) InsertDimensionRange(ctx *core.Context, body *SpreadsheetsInsertDimensionRangeReqBody, optFns ...request.OptFn) *SpreadsheetsInsertDimensionRangeReqCall {
	return &SpreadsheetsInsertDimensionRangeReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsMergeCellsReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsMergeCellsReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsMergeCellsReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsMergeCellsReqCall) Do() (*SpreadsheetsMergeCellsResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsMergeCellsResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/merge_cells", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) MergeCells(ctx *core.Context, body *SpreadsheetsMergeCellsReqBody, optFns ...request.OptFn) *SpreadsheetsMergeCellsReqCall {
	return &SpreadsheetsMergeCellsReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsMetainfoReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	pathParams    map[string]interface{}
	queryParams   map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsMetainfoReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}
func (rc *SpreadsheetsMetainfoReqCall) SetExtFields(extFields string) {
	rc.queryParams["extFields"] = extFields
}

func (rc *SpreadsheetsMetainfoReqCall) Do() (*SpreadsheetsMetainfoResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &SpreadsheetsMetainfoResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/metainfo", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) Metainfo(ctx *core.Context, optFns ...request.OptFn) *SpreadsheetsMetainfoReqCall {
	return &SpreadsheetsMetainfoReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		pathParams:    map[string]interface{}{},
		queryParams:   map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsProtectedRangeBatchCreateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsProtectedRangeBatchCreateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsProtectedRangeBatchCreateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsProtectedRangeBatchCreateReqCall) Do() (*SpreadsheetsProtectedRangeBatchCreateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsProtectedRangeBatchCreateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_dimension", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ProtectedRangeBatchCreate(ctx *core.Context, body *SpreadsheetsProtectedRangeBatchCreateReqBody, optFns ...request.OptFn) *SpreadsheetsProtectedRangeBatchCreateReqCall {
	return &SpreadsheetsProtectedRangeBatchCreateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsProtectedRangeBatchDeleteReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsProtectedRangeBatchDeleteReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsProtectedRangeBatchDeleteReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsProtectedRangeBatchDeleteReqCall) Do() (*SpreadsheetsProtectedRangeBatchDeleteResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsProtectedRangeBatchDeleteResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_del", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ProtectedRangeBatchDelete(ctx *core.Context, body *SpreadsheetsProtectedRangeBatchDeleteReqBody, optFns ...request.OptFn) *SpreadsheetsProtectedRangeBatchDeleteReqCall {
	return &SpreadsheetsProtectedRangeBatchDeleteReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsProtectedRangeBatchGetReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	pathParams    map[string]interface{}
	queryParams   map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsProtectedRangeBatchGetReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}
func (rc *SpreadsheetsProtectedRangeBatchGetReqCall) SetProtectIds(protectIds ...string) {
	rc.queryParams["protectIds"] = protectIds
}
func (rc *SpreadsheetsProtectedRangeBatchGetReqCall) SetMemberType(memberType string) {
	rc.queryParams["memberType"] = memberType
}

func (rc *SpreadsheetsProtectedRangeBatchGetReqCall) Do() (*SpreadsheetsProtectedRangeBatchGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &SpreadsheetsProtectedRangeBatchGetResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_get", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ProtectedRangeBatchGet(ctx *core.Context, optFns ...request.OptFn) *SpreadsheetsProtectedRangeBatchGetReqCall {
	return &SpreadsheetsProtectedRangeBatchGetReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		pathParams:    map[string]interface{}{},
		queryParams:   map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsProtectedRangeBatchUpdateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsProtectedRangeBatchUpdateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsProtectedRangeBatchUpdateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsProtectedRangeBatchUpdateReqCall) Do() (*SpreadsheetsProtectedRangeBatchUpdateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsProtectedRangeBatchUpdateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ProtectedRangeBatchUpdate(ctx *core.Context, body *SpreadsheetsProtectedRangeBatchUpdateReqBody, optFns ...request.OptFn) *SpreadsheetsProtectedRangeBatchUpdateReqCall {
	return &SpreadsheetsProtectedRangeBatchUpdateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsSheetsBatchUpdateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsSheetsBatchUpdateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsSheetsBatchUpdateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsSheetsBatchUpdateReqCall) Do() (*SpreadsheetsSheetsBatchUpdateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsSheetsBatchUpdateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/sheets_batch_update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) SheetsBatchUpdate(ctx *core.Context, body *SpreadsheetsSheetsBatchUpdateReqBody, optFns ...request.OptFn) *SpreadsheetsSheetsBatchUpdateReqCall {
	return &SpreadsheetsSheetsBatchUpdateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsSheetsUpdatePropertiesReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsSheetsUpdatePropertiesReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsSheetsUpdatePropertiesReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsSheetsUpdatePropertiesReqCall) Do() (*SpreadsheetsSheetsUpdatePropertiesResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsSheetsUpdatePropertiesResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/properties", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) SheetsUpdateProperties(ctx *core.Context, body *SpreadsheetsSheetsUpdatePropertiesReqBody, optFns ...request.OptFn) *SpreadsheetsSheetsUpdatePropertiesReqCall {
	return &SpreadsheetsSheetsUpdatePropertiesReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsStyleUpdateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsStyleUpdateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsStyleUpdateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsStyleUpdateReqCall) Do() (*SpreadsheetsStyleUpdateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsStyleUpdateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/style", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) StyleUpdate(ctx *core.Context, body *SpreadsheetsStyleUpdateReqBody, optFns ...request.OptFn) *SpreadsheetsStyleUpdateReqCall {
	return &SpreadsheetsStyleUpdateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsStylesBatchUpdateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsStylesBatchUpdateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsStylesBatchUpdateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsStylesBatchUpdateReqCall) Do() (*SpreadsheetsStylesBatchUpdateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsStylesBatchUpdateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/styles_batch_update", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) StylesBatchUpdate(ctx *core.Context, body *SpreadsheetsStylesBatchUpdateReqBody, optFns ...request.OptFn) *SpreadsheetsStylesBatchUpdateReqCall {
	return &SpreadsheetsStylesBatchUpdateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsUnmergeCellsReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsUnmergeCellsReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsUnmergeCellsReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsUnmergeCellsReqCall) Do() (*SpreadsheetsUnmergeCellsResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsUnmergeCellsResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/unmerge_cells", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) UnmergeCells(ctx *core.Context, body *SpreadsheetsUnmergeCellsReqBody, optFns ...request.OptFn) *SpreadsheetsUnmergeCellsReqCall {
	return &SpreadsheetsUnmergeCellsReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsValuesAppendReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsValuesAppendReqBody
	pathParams    map[string]interface{}
	queryParams   map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsValuesAppendReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}
func (rc *SpreadsheetsValuesAppendReqCall) SetInsertDataOption(insertDataOption string) {
	rc.queryParams["insertDataOption"] = insertDataOption
}

func (rc *SpreadsheetsValuesAppendReqCall) Do() (*SpreadsheetsValuesAppendResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &SpreadsheetsValuesAppendResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_append", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ValuesAppend(ctx *core.Context, body *SpreadsheetsValuesAppendReqBody, optFns ...request.OptFn) *SpreadsheetsValuesAppendReqCall {
	return &SpreadsheetsValuesAppendReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		queryParams:   map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsValuesBatchGetReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	pathParams    map[string]interface{}
	queryParams   map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsValuesBatchGetReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}
func (rc *SpreadsheetsValuesBatchGetReqCall) SetRanges(ranges ...string) {
	rc.queryParams["ranges"] = ranges
}
func (rc *SpreadsheetsValuesBatchGetReqCall) SetValueRenderOption(valueRenderOption string) {
	rc.queryParams["valueRenderOption"] = valueRenderOption
}
func (rc *SpreadsheetsValuesBatchGetReqCall) SetDateTimeRenderOption(dateTimeRenderOption string) {
	rc.queryParams["dateTimeRenderOption"] = dateTimeRenderOption
}

func (rc *SpreadsheetsValuesBatchGetReqCall) Do() (*SpreadsheetsValuesBatchGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &SpreadsheetsValuesBatchGetResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_get", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ValuesBatchGet(ctx *core.Context, optFns ...request.OptFn) *SpreadsheetsValuesBatchGetReqCall {
	return &SpreadsheetsValuesBatchGetReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		pathParams:    map[string]interface{}{},
		queryParams:   map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsValuesBatchUpdateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsValuesBatchUpdateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsValuesBatchUpdateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsValuesBatchUpdateReqCall) Do() (*SpreadsheetsValuesBatchUpdateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsValuesBatchUpdateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ValuesBatchUpdate(ctx *core.Context, body *SpreadsheetsValuesBatchUpdateReqBody, optFns ...request.OptFn) *SpreadsheetsValuesBatchUpdateReqCall {
	return &SpreadsheetsValuesBatchUpdateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsValuesGetReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	pathParams    map[string]interface{}
	queryParams   map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsValuesGetReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}
func (rc *SpreadsheetsValuesGetReqCall) SetRange(range_ string) {
	rc.pathParams["range"] = range_
}
func (rc *SpreadsheetsValuesGetReqCall) SetValueRenderOption(valueRenderOption string) {
	rc.queryParams["valueRenderOption"] = valueRenderOption
}
func (rc *SpreadsheetsValuesGetReqCall) SetDateTimeRenderOption(dateTimeRenderOption string) {
	rc.queryParams["dateTimeRenderOption"] = dateTimeRenderOption
}

func (rc *SpreadsheetsValuesGetReqCall) Do() (*SpreadsheetsValuesGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &SpreadsheetsValuesGetResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values/:range", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ValuesGet(ctx *core.Context, optFns ...request.OptFn) *SpreadsheetsValuesGetReqCall {
	return &SpreadsheetsValuesGetReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		pathParams:    map[string]interface{}{},
		queryParams:   map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsValuesImageReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsValuesImageReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsValuesImageReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsValuesImageReqCall) Do() (*SpreadsheetsValuesImageResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsValuesImageResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_image", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ValuesImage(ctx *core.Context, body *SpreadsheetsValuesImageReqBody, optFns ...request.OptFn) *SpreadsheetsValuesImageReqCall {
	return &SpreadsheetsValuesImageReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsValuesPrependReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsValuesPrependReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsValuesPrependReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsValuesPrependReqCall) Do() (*SpreadsheetsValuesPrependResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsValuesPrependResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_prepend", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ValuesPrepend(ctx *core.Context, body *SpreadsheetsValuesPrependReqBody, optFns ...request.OptFn) *SpreadsheetsValuesPrependReqCall {
	return &SpreadsheetsValuesPrependReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}

type SpreadsheetsValuesUpdateReqCall struct {
	ctx           *core.Context
	spreadsheetss *SpreadsheetsService
	body          *SpreadsheetsValuesUpdateReqBody
	pathParams    map[string]interface{}
	optFns        []request.OptFn
}

func (rc *SpreadsheetsValuesUpdateReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *SpreadsheetsValuesUpdateReqCall) Do() (*SpreadsheetsValuesUpdateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &SpreadsheetsValuesUpdateResult{}
	req := request.NewRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.spreadsheetss.service.conf, req)
	return result, err
}

func (spreadsheetss *SpreadsheetsService) ValuesUpdate(ctx *core.Context, body *SpreadsheetsValuesUpdateReqBody, optFns ...request.OptFn) *SpreadsheetsValuesUpdateReqCall {
	return &SpreadsheetsValuesUpdateReqCall{
		ctx:           ctx,
		spreadsheetss: spreadsheetss,
		body:          body,
		pathParams:    map[string]interface{}{},
		optFns:        optFns,
	}
}
