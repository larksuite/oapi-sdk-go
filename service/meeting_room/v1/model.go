// Package meeting_room code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkmeeting_room

import (
	"github.com/larksuite/oapi-sdk-go/v3/event"
)

type EventUids struct {
	EventUids []*EventUid `json:"EventUids,omitempty"` // EventUids
}

type EventUidsBuilder struct {
	eventUids     []*EventUid // EventUids
	eventUidsFlag bool
}

func NewEventUidsBuilder() *EventUidsBuilder {
	builder := &EventUidsBuilder{}
	return builder
}

// EventUids
//
// 示例值：
func (builder *EventUidsBuilder) EventUids(eventUids []*EventUid) *EventUidsBuilder {
	builder.eventUids = eventUids
	builder.eventUidsFlag = true
	return builder
}

func (builder *EventUidsBuilder) Build() *EventUids {
	req := &EventUids{}
	if builder.eventUidsFlag {
		req.EventUids = builder.eventUids
	}
	return req
}

type EventInfo struct {
	Uid          *string  `json:"uid,omitempty"`           // 日程唯一 ID
	OriginalTime *int     `json:"original_time,omitempty"` // 日程实例原始时间。非重复性日程和重复性日程，此处传 0；重复性日程的例外，传对应的 original_time
	Summary      *string  `json:"summary,omitempty"`       // 日程主题
	Vchat        []*Vchat `json:"vchat,omitempty"`         // 视频会议信息
}

type EventInfoBuilder struct {
	uid              string // 日程唯一 ID
	uidFlag          bool
	originalTime     int // 日程实例原始时间。非重复性日程和重复性日程，此处传 0；重复性日程的例外，传对应的 original_time
	originalTimeFlag bool
	summary          string // 日程主题
	summaryFlag      bool
	vchat            []*Vchat // 视频会议信息
	vchatFlag        bool
}

func NewEventInfoBuilder() *EventInfoBuilder {
	builder := &EventInfoBuilder{}
	return builder
}

// 日程唯一 ID
//
// 示例值：a04dbea1-86b9-4372-aa8d-64ebe801be2a
func (builder *EventInfoBuilder) Uid(uid string) *EventInfoBuilder {
	builder.uid = uid
	builder.uidFlag = true
	return builder
}

// 日程实例原始时间。非重复性日程和重复性日程，此处传 0；重复性日程的例外，传对应的 original_time
//
// 示例值：0
func (builder *EventInfoBuilder) OriginalTime(originalTime int) *EventInfoBuilder {
	builder.originalTime = originalTime
	builder.originalTimeFlag = true
	return builder
}

// 日程主题
//
// 示例值：test
func (builder *EventInfoBuilder) Summary(summary string) *EventInfoBuilder {
	builder.summary = summary
	builder.summaryFlag = true
	return builder
}

// 视频会议信息
//
// 示例值：
func (builder *EventInfoBuilder) Vchat(vchat []*Vchat) *EventInfoBuilder {
	builder.vchat = vchat
	builder.vchatFlag = true
	return builder
}

func (builder *EventInfoBuilder) Build() *EventInfo {
	req := &EventInfo{}
	if builder.uidFlag {
		req.Uid = &builder.uid

	}
	if builder.originalTimeFlag {
		req.OriginalTime = &builder.originalTime

	}
	if builder.summaryFlag {
		req.Summary = &builder.summary

	}
	if builder.vchatFlag {
		req.Vchat = builder.vchat
	}
	return req
}

type EventTime struct {
	TimeStamp *int `json:"time_stamp,omitempty"` //
}

type EventTimeBuilder struct {
	timeStamp     int //
	timeStampFlag bool
}

func NewEventTimeBuilder() *EventTimeBuilder {
	builder := &EventTimeBuilder{}
	return builder
}

//
//
// 示例值：
func (builder *EventTimeBuilder) TimeStamp(timeStamp int) *EventTimeBuilder {
	builder.timeStamp = timeStamp
	builder.timeStampFlag = true
	return builder
}

func (builder *EventTimeBuilder) Build() *EventTime {
	req := &EventTime{}
	if builder.timeStampFlag {
		req.TimeStamp = &builder.timeStamp

	}
	return req
}

type EventUid struct {
	Uid          *string `json:"uid,omitempty"`           // 日程唯一 ID
	OriginalTime *int    `json:"original_time,omitempty"` // original_time
}

type EventUidBuilder struct {
	uid              string // 日程唯一 ID
	uidFlag          bool
	originalTime     int // original_time
	originalTimeFlag bool
}

func NewEventUidBuilder() *EventUidBuilder {
	builder := &EventUidBuilder{}
	return builder
}

// 日程唯一 ID
//
// 示例值：a04dbea1-86b9-4372-aa8d-64ebe801be2a
func (builder *EventUidBuilder) Uid(uid string) *EventUidBuilder {
	builder.uid = uid
	builder.uidFlag = true
	return builder
}

// original_time
//
// 示例值：0
func (builder *EventUidBuilder) OriginalTime(originalTime int) *EventUidBuilder {
	builder.originalTime = originalTime
	builder.originalTimeFlag = true
	return builder
}

func (builder *EventUidBuilder) Build() *EventUid {
	req := &EventUid{}
	if builder.uidFlag {
		req.Uid = &builder.uid

	}
	if builder.originalTimeFlag {
		req.OriginalTime = &builder.originalTime

	}
	return req
}

type MeetingRoom struct {
	RoomId *int `json:"room_id,omitempty"` // your description here
}

type MeetingRoomBuilder struct {
	roomId     int // your description here
	roomIdFlag bool
}

func NewMeetingRoomBuilder() *MeetingRoomBuilder {
	builder := &MeetingRoomBuilder{}
	return builder
}

// your description here
//
// 示例值：
func (builder *MeetingRoomBuilder) RoomId(roomId int) *MeetingRoomBuilder {
	builder.roomId = roomId
	builder.roomIdFlag = true
	return builder
}

func (builder *MeetingRoomBuilder) Build() *MeetingRoom {
	req := &MeetingRoom{}
	if builder.roomIdFlag {
		req.RoomId = &builder.roomId

	}
	return req
}

type UserInfo struct {
	OpenId *string `json:"open_id,omitempty"` //
	UserId *string `json:"user_id,omitempty"` // 用户在 ISV 下的唯一标识，申请了"获取用户 user ID"权限后才会返回
}

type UserInfoBuilder struct {
	openId     string //
	openIdFlag bool
	userId     string // 用户在 ISV 下的唯一标识，申请了"获取用户 user ID"权限后才会返回
	userIdFlag bool
}

func NewUserInfoBuilder() *UserInfoBuilder {
	builder := &UserInfoBuilder{}
	return builder
}

//
//
// 示例值：
func (builder *UserInfoBuilder) OpenId(openId string) *UserInfoBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}

// 用户在 ISV 下的唯一标识，申请了"获取用户 user ID"权限后才会返回
//
// 示例值：
func (builder *UserInfoBuilder) UserId(userId string) *UserInfoBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *UserInfoBuilder) Build() *UserInfo {
	req := &UserInfo{}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req
}

type Vchat struct {
	MeetingUrl *string `json:"meeting_url,omitempty"` // 视频会议链接
	VcType     *string `json:"vc_type,omitempty"`     // 视频会议类型
}

type VchatBuilder struct {
	meetingUrl     string // 视频会议链接
	meetingUrlFlag bool
	vcType         string // 视频会议类型
	vcTypeFlag     bool
}

func NewVchatBuilder() *VchatBuilder {
	builder := &VchatBuilder{}
	return builder
}

// 视频会议链接
//
// 示例值：https://vc.feishu.cn/j/935314044
func (builder *VchatBuilder) MeetingUrl(meetingUrl string) *VchatBuilder {
	builder.meetingUrl = meetingUrl
	builder.meetingUrlFlag = true
	return builder
}

// 视频会议类型
//
// 示例值：vc
func (builder *VchatBuilder) VcType(vcType string) *VchatBuilder {
	builder.vcType = vcType
	builder.vcTypeFlag = true
	return builder
}

func (builder *VchatBuilder) Build() *Vchat {
	req := &Vchat{}
	if builder.meetingUrlFlag {
		req.MeetingUrl = &builder.meetingUrl

	}
	if builder.vcTypeFlag {
		req.VcType = &builder.vcType

	}
	return req
}

type P2MeetingRoomCreatedV1Data struct {
	RoomName *string `json:"room_name,omitempty"` //
	RoomId   *string `json:"room_id,omitempty"`   //
}

type P2MeetingRoomCreatedV1 struct {
	*larkevent.EventV2Base                             // 事件基础数据
	*larkevent.EventReq                                // 请求原生数据
	Event                  *P2MeetingRoomCreatedV1Data `json:"event"` // 事件内容
}

func (m *P2MeetingRoomCreatedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2MeetingRoomDeletedV1Data struct {
	RoomName *string `json:"room_name,omitempty"` //
	RoomId   *string `json:"room_id,omitempty"`   //
}

type P2MeetingRoomDeletedV1 struct {
	*larkevent.EventV2Base                             // 事件基础数据
	*larkevent.EventReq                                // 请求原生数据
	Event                  *P2MeetingRoomDeletedV1Data `json:"event"` // 事件内容
}

func (m *P2MeetingRoomDeletedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2MeetingRoomStatusChangedV1Data struct {
	RoomName *string `json:"room_name,omitempty"` // 会议室名称
	RoomId   *string `json:"room_id,omitempty"`   // 会议室 ID
}

type P2MeetingRoomStatusChangedV1 struct {
	*larkevent.EventV2Base                                   // 事件基础数据
	*larkevent.EventReq                                      // 请求原生数据
	Event                  *P2MeetingRoomStatusChangedV1Data `json:"event"` // 事件内容
}

func (m *P2MeetingRoomStatusChangedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2MeetingRoomUpdatedV1Data struct {
	RoomName *string `json:"room_name,omitempty"` //
	RoomId   *string `json:"room_id,omitempty"`   //
}

type P2MeetingRoomUpdatedV1 struct {
	*larkevent.EventV2Base                             // 事件基础数据
	*larkevent.EventReq                                // 请求原生数据
	Event                  *P2MeetingRoomUpdatedV1Data `json:"event"` // 事件内容
}

func (m *P2MeetingRoomUpdatedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}
